<resources>
    <string name="app_name">BasdatPBL</string>
    <string name="apk_nm">BasdatPBL</string>
    <string name="universitas">Universitas Negeri Malang</string>

    <string name="title_activity_bottom">BottomActivity</string>
    <string name="awal">Home</string>
    <string name="materi">Materi</string>
    <string name="kasus">Kasus</string>
    <string name="kuis">Kuis</string>
    <string name="info">Info</string>

    <!--    Section Halaman Awal-->
    <string name="judul_hero">BasdatPBL</string>
    <string name="des_hero">Media pembelajaran Basis Data bermuatan Problem Based Learning untuk siswa SMK Kelas XI Kompetensi Keahlian Rekayasa Perangkat Lunak.</string>
    <string name="materi_hero">Materi yang dapat dipelajari dalam aplikasi ini</string>
    <string name="tujuan_hero">Tujuan dari pembelajaran melalui aplikasi ini</string>
    <string name="des_tujuan_hero">1. Mempermudah proses pembelajaran\n2. Meningkatkan efisiensi proses pembelajaran\n3. Melatih kemampuan <i>problem solving</i></string>
    <string name="kasus_hero">Kasus dalam aplikasi ini</string>
    <!--    <string name="des_kasus_hero">Kasus berisi soal berdasarkan materi yang terdapat dalam media pembelajaran ini, yaitu Hirarki basis data, <i>Entity Relationship Diagram</i>, Ketergantungan fungsional, dan Normalisasi data. Materi yang terdapat dalam kasus menerapkan model pembelajaran <i>Problem Based Learning</i></string>-->
    <string name="des_kasus_hero">Kasus berisi soal-soal dengan menerapkan model pembelajaran <i>Problem Based Learning</i></string>

    <!-- End Section Halaman Awal-->

    <string name="judul_kuis">Kuis</string>
    <string name="des_kuis"> </string>
    <string name="judul_kasus">Kasus</string>
    <string name="des_kasus"> </string>

    <!--    Section Informasi-->
    <string name="informasi">Informasi</string>
    <string name="info_pengembang">Tri Rizki Herlambang\nS1 Pendidikan Teknik Informatika\nFakultas Teknik\nUniversitas Negeri Malang</string>
    <string name="info_des">Aplikasi ini dikembangkan untuk menunjang pembelajaran mata pelajaran Basis Data Kelas XI. Aplikasi ini dapat berjalan dengan baik dengan spesifikasi minimun smartphone sebagai berikut:</string>
    <string name="info_menu">
        a. Menu Pendahuluan / <i>Home</i>\n\t\tPada menu Pendahuluan berisi informasi tentang deskripsi mata pelajaran Basis Data, Kompetensi Dasar yang disajikan dalam aplikasi dan tujuan dari pembelajaran melalui aplikasi BasdatPBL.\n\n
        b. Menu Materi\n\t\tPada menu Materi berisi materi lengkap beserta vide pembelajaran yang disajikan dalam aplikasi, diantaranya:\n(1) Hirarki Basis Data\n(2) <i>Entity Relationship Diagram</i>\n(3) Ketergantungan Fungsional\n(4) Normalisasi Data\n\n
        c. Menu Kasus\n\t\tPada menu Kasus berisi soal dengan menerapkan model pembelajaran <i>Problem Based Learning</i>.\n\n
        d. Menu Kuis\n\t\tPada menu Kuis berisi pertanyaan untuk menguji tingkat pemahaman siswa terhadap materi. Tiap Kuis berisi 5 sampai dengan 10 soal.\n\n
        e. Menu Info\n\t\tPada menu Info berisi informasi tentang persyaratan minimum aplikasi, penjelasan menu, tata cara mengerjakan kasus, cara mengerjakan kuis dan informasi pengembang.
    </string>
    <string name="info_kasus">
        \t\tDalam aplikasi pembelajaran BasdatPBL terdapat menu kasus yang menyajikan soal dengan menggunakan model pembelajaran <i>Problem Based Learning</i>. Cara mengerjakan soal-soal di halaman kasus dengan cara mengikuti 5 tahap yang ada, yaitu\n
        1) Orientasi Masalah
    </string>
    <string name="info_kasus1">
        \t\tLangkah pertama dalam menyelesaikan kasus adalah mengetahui permasalahan dari sebuah kasus, pengguna pada tahap ini akan diberikan ilustrasi permasalahan dengan contoh gambar.\n\n
        2) Penentuan Masalah Pokok
    </string>
    <string name="info_kasus2">
        \t\tSetelah membaca ilustrasi dari tahap sebelumnya, pengguna diwajibkan memilih satu atau lebih pilihan masalah sesuai dengan pemahaman yang didapat setelah membaca ilustrasi. Jika masih belum memahami ilustrasi dari tahap sebelumnya, user bisa menekan tombol di kanan atas untuk melihat kembali ilustrasi permasalahan.\n\n
        3) Perencanaan Penyelesaian Masalah
    </string>
    <string name="info_kasus3">
        \t\tTahap ketiga adalah menentukan cara penyelesaian / solusi untuk menyelesaikan masalah yang sudah dipilih di tahap sebelumnya. Pada tahap ketiga ini, user dapat memilih jawaban lebih dari satu.\n\n
        4) Pelaksanaan Rencana
    </string>
    <string name="info_kasus4">
        \t\tPada tahap keempat ini, user akan menyampaikan hasil dari penyelesaian permmasalahan yang sebelumnya telah dipilih di awal. Penyampaian hasil pada tahap ini berupa pencocokan kata.\n\n
        5) Evaluasi
    </string>
    <string name="info_kasus5">
        \t\tTahap ini merupakan tahap terakhir dalam penyelesaian kasus. Pengguna akan mendapatkan evaluasi selama pemecahan kasus, evaluasi akan didapatkan di tahap penentuan masalah, perencanaan penyelesaian masalah, dan pelaksanaan rencana. Evaluasi yang didapatkan pengguna berupa saran tentang letak kesalahan ketika menyelesaikan kasus.
    </string>
    <string name="info_kuis">
        \t\tDalam menu Kuis menyajikan soal dengan model soal pilihan ganda. Terdapat empat pilihan kuis yang sesuai dengan banyaknya materi pokok yang terdapat dalam aplikasi BasdatPBL. Soal yang ditampilkan pada tiap Kuis berisi 5 hingga 10 soal.
    </string>
    <string name="info_kuis1">
        \t\tKetika selesai mengerjakan kuis, maka akan ditampilkan nilai seperti berikut.
    </string>

    <string name="basis_data">Basis Data</string>
    <string name="penjelasan_menu">1. Penjelasan Menu</string>
    <string name="cara_mengerjakan_kasus">2. Cara Mengerjakan Kasus</string>
    <string name="cara_mengerjakan_kuis">3. Cara Mengerjakan Kuis</string>
    <string name="informasi_pengembang">4. Informasi Pengembang</string>
    <!--   End Section Informasi-->

    <!--Materi Hirarki Basis Data-->
    <string name="deskripsiHirarki">Apa saja yang akan dipelajari dalam Bab ini:\n
        1. Definisi Basis Data\n
        2. <i>Database Management System</i>\n
        3. Struktur / Arsitektur Basis Data\n
        4. Skema / Abstraksi Data\n
        5. Model Basis Data</string>
    <string name="deskripsiErd">Apa saja yang akan dipelajari dalam Bab ini:\n
        1. Definisi <i>Entity Relationship Diagram</i>\n
        2. Entitas\n
        3. Atribut\n
        4. Relasi</string>
    <string name="prasyaratErd">Prasyarat :\n
        1. Memahami Struktur Hirarki Basis Data</string>
    <string name="deskripsiKetergantungan">Apa saja yang akan dipelajari dalam Bab ini:\n
        1. Definisi Ketergantungan Fungsional\n
        2. Ketergantungan Fungsional\n
        3. Ketergantungan Sepenuhnya\n
        4. Ketergantungan Sebagian\n
        5. Ketergantungan Penuh\n
        6. Ketergantungan Transitif
    </string>
    <string name="prasyaratKetergantungan">Prasyarat :\n
        1. Memahami Struktur Hirarki Basis Data\n
        2. Memahami Diagram Relasi Entitas</string>
    <string name="deskripsiNormalisasi">Apa saja yang akan dipelajari dalam Bab ini:\n
        1. Definisi Normalisasi\n
        2. Syarat bentuk normal pertama(1NF)\n
        3. Syarat bentuk normal kedua(2NF)\n
        4. Syarat bentuk normal ketiga(3NF)</string>
    <string name="prasyaratNormalisasi">Prasyarat :\n
        1. Memahami Struktur Hirarki Basis Data\n
        2. Memahami Diagram Relasi Entitas\n
        3. Memahami Ketergantungan Fungsional secara menyeluruh</string>
    <string name="definisiBasisData">Basis Data atau <i>Database</i> merupakan kumpulan data yang terorganisir, yang umumnya disimpan dan diakses secara elektronik dari suatu sistem komputer.</string>
    <string name="kecepatan"><b>Kecepatan</b>\n\nMudah dan cepat dalam melakukan penyimpanan, perubahan dan menampilkan kembali.</string>
    <string name="efisiensi"><b>Efisiensi</b>\n\nMampu mengurangi pengulangan atau redundansi data.</string>
    <string name="ketersediaan"><b>Ketersediaan</b>\n\nData selalu siap dipakai.</string>
    <string name="keamanan"><b>Keamanan</b>\n\nData lebih aman dengan perbedaan hak akses pengguna.</string>
    <string name="kebersamaan"><b>Kebersamaan</b>\n\nData yang dikelola oleh sistem mendukung lingkungan banyak pemakai</string>
    <string name="keakuratan"><b>Keakuratan</b>\n\nData lebih terjaga dan akurat dengan menerapkan aturan dan batasan tertentu</string>
    <string name="file"><b><i>File</i></b></string>
    <string name="record"><b><i>Record</i></b></string>
    <string name="field"><b><i>Field</i></b></string>
    <string name="apa_itu_arsitektur_basis_data">Apa Itu Arsitektur Basis Data?</string>

    <string name="tujuan_penggunaan_basis_data">Tujuan Penggunaan Basis Data</string>
    <string name="apa_itu_basis_data">Apa itu Basis Data?</string>
    <string name="komponen_basis_data">Komponen Basis Data</string>
    <string name="pengguna_basis_data">Pengguna Basis Data</string>

    <string name="komponen">Basis Data dibangun oleh enam komponen pokok, antara lain:\n\n
        <b>1. <i>Hardware</i></b>\nDalam sistem pengolahan basis data digital, perangkat utama sebagai pengolah data adalah komputer.\n\n
        <b>2. <i>Software</i></b>\nPerangkat lunak digunakan untuk mendukung proses pengelolaan basis data dan bersifat opsional.\nMisal: bahasa pemrograman C, Pascal.\n\n
        <b>3. <i>Operating System</i></b>\nMerupakan perangkat lunak yang digunakan untuk mengelola aplikasi basis data dan penggunaan sumberdaya komputer.\n\n
        <b>4. <i>Database Management System</i> (DBMS)</b>\nMerupakan program aplikasi untuk pengelolaan basis data, seperti <i>Microsoft acces, Oracle</i> dan lian-lain.\n\n
        <b>5. Basis Data Lain</b>\nData lain yang mempunyai keterkaitan dan hubungan dengan basis data itu sendiri.\n\n
        <b>6. <i>User</i></b>\nPengguna yang terlibat dalam pengelolaan dan penggunaan basis data.\n\n </string>
    <string name="dbms"><i>Database Management System</i> (DBMS) adalah program aplikasi yang dibuat dan bekerja dalam satu system.\n\nDBMS didesain untuk membantu dalam hal pemeliharaan dan <i>utilitas</i> kumpulan data dalam jumlah besar.\n\nDBMS dapat menjadi alternatif penggunaan secara khusus untuk aplikasi, misalnya penyimpanan data dalam <i>field</i> dan menulis kode aplikasi yang spesifik untuk pengaturannya.\n\nKumpulan <i>file</i> (tabel) yang saling berhubungan dalam di sebuah komputer dan sekumpulan program yang memungkinkan beberapa pemakai dan atau program lain untuk mengakses dan memanipulasi <i>file</i> atau tabel tersebut.\n\nStruktur yang dikelola dbms dijabarkan pada gambar 1.1.</string>
    <string name="user">Basis Data dibangun oleh enam komponen pokok, antara lain:\n\n
        <b>1. <i>Database Administrator</i></b>\nSeseorang yang mengorganisasi seluruh sistem basis data. Database administrator memiliki tanggung jawab penuh dalam manajemen database meliputi: pengaturan hak akses, koordinasi dan monitoring serta bertanggung jawab terhadap kebutuhan <i>hardware</i> dan <i>software</i>. Dalam pekerjaannya biasanya dibantu oleh staf Admin.\n\n
        <b>2. <i>Database Designer</i></b>\nSeseorang yang bertugas merancang dan mengembangkan <i>database</i>. database designer bertanggung jawab dalam identifikasi data yang tersimpan dalam database, menentukan struktur data yang tepat untuk disimpan dalam database. Database designer memerlukan koordinasi akan kebutuhan user database.\n\n
        <b>3. <i>Application Programmer</i></b>\nPenggunaa yang berinteraksi dengan basis data melalui <i>Data Manipulation Language</i> (DML). DML meliputi program yang ditulis dalam bahasa pemrograman induk yang dipakai.\n\n
        <b>4. <i>End user</i> (DBMS)</b>\nPengguna yang memanfaatkan atau membutuhkan akses ke <i>database</i> melalui <i>query</i>, manambah, merubah menghapus maupun membuat <i>report database</i>. \n\n
        <b>5. <i>System Analyst</i></b>\nPengguna yang merencanakan dan menentukan kebutuhan sistem.\n\n
        <b>6. <i>Application Programmers (Software Engineering)</i></b>\nPengguna tanggung jawabnya berhubungan dengan kebutuhan koneksi database.\n\n
        <b>7. <i>Worker Behind The Scene</i></b>\nIalah pengguna yang tidak tertarik pada <i>database</i>, tetapi lebih cenderung pada membangun <i>database</i> atau kebutuhannya menggunakan alat bantu.\n\n</string>

    <string name="h1">Arsitektur basis data merupakan suatu kumpulan data yang tersimpan secara sistematik dimana user dapat melihat data dan bagaimana cara user melihat data tersebut.\n\Struktur basis data dijabarkan dalam gambar 1.2 berikut:</string>
    <string name="h21">Elemen (kolom atau <i>field</i>) data adalah satuan data terkecil yang tidak dapat dipecah lagi menjadi unit lain yang bermakna.\n\nKedudukan <i>field</i> dalam basis data dapat dilihat pada gambar 1.3\n\</string>
    <string name="h22">Rekaman (<i>record</i>) merupakan gabungan sejumlah elemen data yang saling terkait. Istilah lain dari <i>record</i> adalah baris atau tupel.\n\nKedudukan <i>record</i> dalam basis data dapat dilihat pada gambar 1.3</string>
    <string name="h23">Berkas (<i>file</i>) adalah himpunan seluruh <i>record</i> yang bertipe sama\n\nKedudukan <i>file</i> dalam basis data dapat dilihat pada gambar 1.3.</string>

    <string name="hd1">Abstraksi data adalah gambaran umum untuk melihat data dalam sebuah sistem basis data.\n\nMetode umum yang digunakan untuk menjelaskan abstraksi dari sistem basis data diformulasikan pada 1978 yang di kenal dengan sebutan <b>ANSI/SPARC</b> (<i>American National Standards Institute/Standard Planning and Requirements Committee</i>) yakni terdapat tiga level dan dapat dilihat pada gambar 1.4. </string>
    <string name="hd11"><i>Internal / Physical Level</i> Merupakan suatu konsep bagaimana diskripsi detail data disimpan dalam sebuah komputer. <i>Physical data</i> merupakan level rendah (<i>low level</i>) yang mendekati ke data sebenarnya.\n\Dalam <i>physical data</i> menjelaskan definisi data yang meliputi nama atribut, tipe data (misalnya varchar, integer dll), size atau ukurannya data. \n\nData yang diimplementasikan berupa table yang terdiri dari barisan data dalam kolom (field) dan baris (record).\n\nSetiap DBMS mempunyai aturan-aturan tersendiri dalam membuat definisi, struktur basis data dan tipe data yang digunakan.\n\nContoh: Deskripsi struktur tabel Mahasiswa.</string>
    <string name="jenis_jenis_tipe_data_dalam_dbms_oracle">Jenis-jenis tipe data dalam DBMS Oracle</string>
    <string name="hd12"><i>Conceptual / Logical Level</i> adalah hubungan antara <i>internal</i> dan <i>external level</i>. \n\n<i>Conceptual level</i> adalah sebuah representasi seluruh muatan informasi yang dikandung oleh basis data. \n\nTingkatan level ini dilihat dari cara pengguna dalam memahami atau mengetahui data.\n\nContohnya adalah diagram relasi pada gambar 1.5.</string>
    <string name="hd13"><i>External / View Level</i>: Berhubungan dengan bagaimana data direpresentasikan dari sisi setiap user. \n\nView level ini menunjukkan data apa yang ingin user lihat tetapi tidak semuanya ditampilkan. misalnya seorang mahasiswa ingin melihat datanya, tetapi ia tidak dapat melihat data dosen, ataupun mahasiswa lainnya.\n\nKegunaan level ini adalah untuk menyederhanakan interaksi antara pemakai dengan sistem.\n\nSalah satu contohnya adalah mahasiswa dapat melihat keterangan Jurusan, Prodi dan Dosen PA seperti pada gambar 1.6.</string>

    <string name="hm1">Pemodelan data merupakan sekumpulan konsep-konsep untuk mendeskripsikan / menggambarkan struktur data.\n\nTerdapat sejumlah cara dalam merepresentasikan model dalam perancangan basis data. Berikut jenis model data, beberapa yang paling umum yaitu:</string>
    <string name="hm3"><i>1. Hierarchical database model</i></string>
    <string name="hm31">Model hierarkis mengatur data ke dalam struktur mirip pohon, di mana setiap catatan memiliki induk tunggal atau <i>root</i>.\n\nModel ini bagus untuk menggambarkan banyak hubungan dunia nyata. </string>
    <string name="hm4"><i>2. Relational model</i></string>
    <string name="hm41">Model relasional mengurutkan data ke dalam tabel, juga dikenal sebagai relasi, yang masing-masing terdiri dari kolom dan baris.\n\nDi dalam basis data, tabel dapat dinormalisasi, atau dibawa untuk mematuhi aturan normalisasi yang membuat basis data fleksibel, mudah beradaptasi, dan dapat diskalakan.\n\n<i>Database</i> relasional biasanya ditulis dalam <i>Structured Query Language</i> (SQL).</string>
    <string name="hm5"><i>3. Network model</i></string>
    <string name="hm51">Model jaringan dibangun berdasarkan model hierarkis dengan memungkinkan banyak hubungan antara catatan terkait, yang menyiratkan banyak catatan orang tua (<i>parent records</i>).\n\nSetiap set terdiri dari satu pemilik atau catatan induk dan satu atau lebih anggota atau catatan anak (<i>child records</i>).\n\n<i>Record</i> dapat menjadi anggota atau anak dalam beberapa set, memungkinkan model ini untuk menyampaikan hubungan yang kompleks. </string>
    <string name="hm6"><i>4. Object-oriented database model</i></string>
    <string name="hm61">Model ini mendefinisikan database sebagai kumpulan objek, atau elemen perangkat lunak yang dapat digunakan kembali, dengan fitur dan metode terkait.\n\nModel database object-oriented adalah model database pasca-relasional yang paling dikenal, karena menggabungkan tabel, tetapi tidak terbatas pada tabel. \n\n Model semacam itu juga dikenal sebagai model basis data hybrid.</string>
    <string name="hm7"><i>5. Entity-relationship model</i></string>
    <string name="hm71">Model ini menangkap hubungan antara entitas dunia nyata seperti model jaringan, namun tidak terkait langsung dengan struktur fisik basis data.\n\nSering digunakan untuk merancang database secara konseptual.\n\nDi sini, orang-orang, tempat, dan hal-hal tentang titik-titik data yang disimpan disebut sebagai entitas, yang masing-masing memiliki atribut tertentu yang bersama-sama membentuk <i>domain</i> mereka. </string>
    <!--End Materi Hirarki-->

    <!--Materi ERD-->
    <string name="ed1"><b><i>Entity Relationship Diagram</i> (ERD)</b> merupakan salah satu bentuk pemodelan basis data yang sering digunakan dalam pengembangan sistem informasi.\n\nERD menunjukkan hubungan dari <i>entity set</i> yang disimpan dalam <i>database</i>.\n\nEntitas dalam konteks ini adalah komponen data. Dengan kata lain, diagram ER menggambarkan struktur logis dari basis data.\n\nDalam membuat E-R diagram diperlukan simbol / notasi, gambar 2.1 menjabarkan simbol-simbol yang biasa digunakan untuk membuat E-R Diagram</string>
    <string name="ed3">Pada dasarnya ada tiga komponen yang digunakan di ERD, yaitu:\n1. Entitas\n2. Atribut\n3. Relasi</string>
    <!--    <string name="ed4">Materi</string>-->

    <string name="ee1">Entitas merupakan objek yang mewakili sesuatu yang nyata dan dapat dibedakan dari sesuatu yang lain. Setiap entitas memiliki beberapa atribut yang mendeskripsikan karakteristik dari objek tersebut. </string>
    <string name="ee2">Entitas dapat berupa :\n1. Entitas yang bersifat fisik yaitu entitas yang secara fisik dapat dilihat.\nContoh: rumah, kendaraan, guru, murid, dan lain-lain.\n\n2. Entitas yang bersifat konsep/logic yaitu entitas yang tidak dapat dilihat secara fisik.\nContoh: pekerjaan, mata pelajaran, rencana, dan lain-lain.</string>
    <string name="ee3">Dalam suatu tabel basis data, entitas identik dengan tabel seperti pada gambar 2.2.</string>
    <string name="ee4">Sekelompok entitas yang sejenis dan berada dalam lingkup yang sama disebut sebagai Entity Sets (Himpunan Entitas)</string>

    <string name="ea1">Atribut merupakan sifat-sifat atau karakteristik pada suatu entitas.\n\nNama atribut identik dengan nama kolom atau <i>field</i> pada suatu tabel dalam basis data.\n\nSimbol yang digunakan untuk atribut adalah oval/elipse\n\nMacam-macam atribut dalam ERD:</string>
    <!--    <string name="ea2">Nama atribut identik dengan nama kolom atau field pada suatu tabel dalam basis data.</string>-->
    <!--    <string name="ea3">Macam-macam atribut dalam ERD:</string>-->
    <string name="ea31">Atribut Kunci yaitu pengidentifikasi entitas yang paling unik untuk semua entitas dalam himpunan entitas.\n\nAtribut kunci dibedakan menjadi tiga, yaitu:\na. <b><i>Super Key</i></b> adalah satu atau lebih atribut yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas\n\nb. <b><i>Candidate Key</i></b> adalah kumpulan atribut minimal yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas.\n\nc. <b><i>Primmary Key</i></b> adalah salah satu candidate key yang digunakan sebagai pengidentifikasi suatu atribut dalam himpunan entitas. Dasar pemilihan primary key adalah key sering digunakan sebagai acuan, key lebih ringkas, key harus unik</string>
    <string name="ea32">Atribut Deskriptif yaitu atribut lain selain atribut kunci yang berfungsi sebagai penjelasan terhadap entitas dalam himpunan entitas</string>
    <string name="ea33">Atribut Sederhana (Simple Attribute) merupakan atribut yang tidak bisa dibagi menjadi atribut yang lebih mendasar.\nContoh: atribut NIS dari entitas siswa</string>
    <string name="ea34">Atribut Komposit (Composite Attribute) merupakan atribut yang terdiri dari beberapa atribut.\nContoh: atribut nama (memiliki detail nama depan dan nama belakang) dari entitas siswa</string>
    <string name="ea35">Atribut Bernilai Banyak (Multi Valued Attribute) merupakan atribut yang dapat bernilai lebih dari satu nilai sejenis.\nContoh: Hobi</string>
    <string name="ea36">Atribut Bernilai Tunggal (Single Valued Attribute) merupakan atribut yang hanya memiliki satu nilai.\nContoh: NIS</string>
    <string name="ea37">Atribut Turunan (Derived Attribute) merupakan atribut yang nilainya diperoleh dari pengolahan atau dirurunkan dari atribut atau tabel lain.\nContoh: atribut rata-rata yang didapat dari perhitungan nilai siswa</string>
    <string name="ea38">Atribut Bernilai (Mandatory Attribute) merupakan atribut yang harus memiliki nilai.</string>
    <string name="ea39">Atribut Tidak Harus Bernilai (Non-Mandatory Attribute) merupakan atribut yang nilainya boleh kosong (null).</string>

    <string name="er1">Relasi menyatakan hubungan antara dua atau beberapa entitas. Setiap relasi mempunyai batasan (<b><i>constraint</i></b>) terhadap kemungkinan kombinasi entitas yang berpartisipasi. Batasan tersebut ditentukan dari situasi yang diwakili relasi tersebut.</string>
    <string name="er11">Cardinality Ratio Constraint menjelaskan batasan jumlah keterhubungan satu entitas dengan entitas lainnya. Berikut macam-macamnya:</string>
    <string name="er2"><b>One to One (1:1)</b>\nSetiap anggota entitas A hanya boleh berhubungan dengan satu anggota entitas B, begitu pula sebaliknya.</string>
    <string name="er3"><b>One to Many (1:N)</b>\nSetiap anggota entitas A dapat berhubungan dengan lebih dari satu anggota entitas B tetapi tidak sebaliknya.</string>
    <string name="er4"><b>Many to Many (N:N)</b>\nSetiap entitas A dapat berhubungan dengan banyak entitas himpunan entitas B dan demikian pula sebaliknya</string>
    <string name="er5">Klasifikasi relasi berdasarkan derajatnya:\n\n<b>1. Unary Degree</b>\n- Relasi yang hanya melibatkan satu entitas </string>
    <!--    <string name="er51"></string>-->
    <string name="er52"><b>2. Binary Degree</b>\n- Relasi yang melibatkan dua entitas</string>
    <string name="er53"><b>3. Ternary Degree</b>\n- Relasi yang melibatkan tiga entitas</string>


    <string name="eb1">Batasan partisipasi atau batasan hubungan entitas menjelaskan bagaimana data itu berelasi, batasan ini menentukan bagaimana (harus ataukah tidak) berpartisipasi suatu entitas dengan relasinya pada entitas lain. </string>
    <string name="_1_internal_level">1. <i>Internal Level</i></string>
    <string name="_2_conceptual_level">2. <i>Conceptual Level</i></string>
    <string name="_3_view_level">3. <i>View Level</i></string>
    <string name="atribut_tidak_harus_bernilai">9. Atribut Tidak Harus bernilai</string>
    <string name="atribut_bernilai">8. Atribut Bernilai</string>
    <string name="atribut_turunan">7. Atribut Turunan</string>
    <string name="atribut_bernilai_tunggal">6. Atribut Bernilai Tunggal</string>
    <string name="atribut_bernilai_banyak">5. Atribut Bernilai Banyak</string>
    <string name="atribut_komposit">4. Atribut Komposit</string>
    <string name="atribut_sederhana">3. Atribut Sederhana</string>
    <string name="atribut_deskriptif">2. Atribut Deskriptif</string>
    <string name="atribut_kunci">1. Atribut Kunci</string>
    <string name="relasi_berdasarkan_derajatnya">Relasi Berdasarkan Derajatnya</string>
    <string name="kardinalitas">Kardinalitas</string>
    <!--Materi ERD-->

    <!--Materi ketergantungan-->
    <string name="kde1">Dependensi merupakan ketergantungan setiap atribut dengan atribut lainnya</string>
    <string name="kde2">Analisis dependensi merupakan konsep <b>penting</b> yang menjadi <b>dasar melakukan normalisasi</b> sehingga diperoleh relasi yang berstruktur baik.\n\nAda beberapa jenis dependensi:\n1. Dependensi Fungsional\n2. Dependensi Sepenuhnya\n3. Dependensi Sebagian\n4. Dependensi Penuh\n5. Dependensi Transitif</string>

    <!--    Ketergantungan fungsional-->
    <string name="kf1">Dependensi fungsional merupakan keterkaitan antara dua atribut atau dua himpunan atribut.\n\n<b>Analogi</b>: terdapat sebuah relasi yang bernama R dengan dua buah atributnya berupa A dan B, sehingga Notasinya R(A,B) </string>
    <string name="kf3">Pada keadaan tersebut, atribut B dikatakan mempunyai dependensi fungsional terhadap A apabila setiap nilai A berhubungan dengan satu nilai yang sama pada B</string>
    <string name="kf31">Dari Tabel Barang diatas ini dapat dinotasikan seperti berikut\n1. KodeBarang -> NamaBarang\n2. KodeBarang -> HargaBarang\n3. KodeBarang -> KodePemasok\n4. KodeBarang -> NamaPemasok\n5. NamaBarang -> KodeBarang\n6. KodePemasok -> NamaPemasok\n7. NamaPemasok -> KodePemasok </string>
    <string name="kf32">Ketergantungan Fungsional diwakili dengan tanda panah seperti ini <b><![CDATA[->]]></b> \n\nPada Notasi KodeBarang -> NamaBarang\nSetiap KodeBarang pasti akan berhubungan dengan hanya sebuah NamaBarang.\n\nContoh: KodeBarang B-001 hanya akan cocok dengan satu NamaBarang yaitu Mirrorless ABV</string>
    <string name="kf33">Notasi singkat:\nKodeBarang -> {NamaBarang, HargaBarang, KodePemasok, NamaPemasok} </string>

    <string name="kf4">Sebuah atribut bisa bergantung pada lebih dari satu atribut\n\n<![CDATA[Notasi : {A,B,…} -> Z]]>\n\nAtribut Z mempunyai dependensi terhadap pasangan A dan B</string>
    <string name="kf41">Pada tabel Guru diatas, memiliki notasi\n\n{NIP, Pendidikan} -> TahunLulus\n\nJadi atribut NIP dan atribut Pendidikan mempengaruhi TahunLulus dari seorang guru </string>

    <!--    Ketergantungan sepenuhnya-->
    <string name="ksp1">Suatu atribut B dikatakan memiliki dependensi sepenuhnya terhadap A apabila\n\n1. Atribut B mempunyai dependensi fungsional terhadap atribut A\n2. Atribut B tidak memiliki dependensi terhadap bagian dari atribut A </string>
    <string name="ksp2">Contoh:\n{NIP, Pendidikan}-> TahunLulus\n\nNotasi berikut merupakan salah satu contoh ketergantungan sepenuhnya, karena TahunLulus bergantung dari dua atribut yaitu NIP dan Pendidikan</string>
    <!--    <string name="ksp3">2. Atribut B tidak memiliki dependensi terhadap bagian dari atribut A</string>-->

    <!--Ketergantungan sebagian -->
    <string name="ks1">Suatu atribut B dikatakan memiliki dependensi sebagian/parsial terhadap A apabila:\n\n1. Atribut B adalah atribut non-key primer dan atribut A adalah primary key\n2. Atribut B memiliki dependensi terhadap sebagian dari atribut A (tidak terhadap keseluruhan atribut A)</string>
    <string name="ks2"><b>Contoh</b>:\nTabel Guru dikatakan memiliki kunci primer berupa (NIP dan Pendidikan)\n\nJadi ketergantungan parsial yang terdapat pada tabel Guru berupa JenisKelamin karena memiliki ketergantungan terhadap atribut NIP saja (bagian dari kunci primer). Begitu pula dengan atribut NamaGuru.</string>

    <!--    Ketergantungan penuh-->
    <string name="kpe1">Suatu atribut B dikatakan memiliki dependensi penuh/total terhadap A apabila\n\n1. Atribut B mempunyai dependensi fungsional terhadap atribut A\n2. Atribut A mempunyai dependansi fungsional terhadap atribut B</string>
    <string name="kpe2">Dependensi Total memiliki notasi <![CDATA[A<->B]]>\n\n<b>Contoh</b>:\n1. KodePemasok -> NamaPemasok\n2. NamaPemasok -> KodePemasok\n\nDengan demikian :\nKodePemasok <![CDATA[<->]]> NamaPemasok\nDengan asumsi: tidak ada nama pemasok yang sama\n\n<b>Contoh lain</b>:\nHargaBarang tidak dapat dikatakan dependensi total terhadap KodeBarang dikarenakan terdapat kemungkinan harga yang sama untuk kode barang yang berbeda.\nBegitu juga dengan atribut NamaPemasok tidak dapat dependensi total terhadap KodeBarang, karena pemasok bisa saja menaruh banyak barang ke toko </string>

    <!--Ketergantungan Transitif    -->
    <string name="kt1">Dependensi Transitif biasanya terjadi pada tabel hasil relasi, atau kondisi dimana terdapat tiga atribut A, B, C.\n\nNotasinya adalah A -> B dan B -> C.\nMaka C dikatakan sebagai dependensi transitif terhadap A melalui B.</string>
    <string name="kt2"><b>Contoh</b>: Tabel Barang\nKodeBarang -> NamaPemasok\n\nKarena, KodeBarang -> KodePemasok dan Kode Pemasok -> NamaPemasok\n\nJadi:\n KodeBarang -> KodePemasok -> NamaPemasok</string>
    <!--Materi ketergantungan-->

    <!--Normalisasi Data    -->
    <string name="nd1">Normalisasi adalah suatu proses yang digunakan untuk menentukan pengelompokan atribut dalam sebuah relasi sehingga diperoleh relasi berstruktur baik</string>
    <string name="nd2">Syarat relasi berstruktur baik:\n1. Mengandung redundansi yang sedikit mungkin.\n2. Memungkinkan baris-baris dalam relasi disisipkan, dimodifikasi, dan dihapus tanpa menimbulkan kesalahan atau ketidakkonsistenan.</string>
    <string name="nd3">Normalisasi dilakukan melalui setiap bentuk form (1NF sampai dengan 5NF).\n\nSecara singkat, tahapan melakukan normalisasi dapat dilihat pada gambar 4.1.</string>
    <string name="nd4">Normalisasi tidak selalu dimulai dari Bentuk tidak ternormalisasi (UNF), namun bisa saja dimulai dari tahap 1NF maupun 2NF tergantung dari tabel yang anda buat terlebih dahulu.</string>

    <string name="np1">Suatu relasi disebut memenuhi bentuk normal pertama (1NF) jika dan hanya jika setiap atribut dari relasi tersebut hanya memiliki <b>nilai tunggal</b> dan <b>tidak ada pengulangan grup atribut dalam baris</b>.\n\nBentuk 1NF tidak boleh mengandung grup atribut yang berulang</string>
    <string name="np2">Contoh:\nTerdapat Tabel Siswa yang memiliki atribut NIS, Nama, dan Hobi. Kalau diperhatikan, atribut Hobi memiliki nilai banyak dan seharusnya tidak diperbolehkan didalam tabel.</string>
    <string name="np3">Maka perlu dilakukan normalisasi bentuk pertama pada atribut hobi sehingga setiap atribut hanya memiliki satu nilai, seperti tabel 4.2 Siswa 1NF berikut.</string>
    <string name="np4">Contoh Lain:\nTerdapat Tabel Buku yang memiliki atribut ISBN, TahunTerbit, IdPengarang, NamaPengarang. Namun dalam contoh kali ini terdapat pengulangan grup atribut yaitu di IdPengarang dan NamaPengarang</string>
    <string name="np5">Maka yang perlu dilakukan adalah menghapus atribut IdPengarang dan NamaPengarang dan <b>membuat <i>record</i> baru</b>.\n\nMenghasilkan bentuk tabel 4.4 berikut</string>

    <string name="nk1">Suatu relasi disebut memenuhi bentuk normal kedua (2NF) jika dan hanya jika\n1. Memenuhi bentuk normal pertama (1NF)\n2. Setiap atribut yang bukan primary key tergantung secara fungsional terhadap semua atribut key dan bukan hanya sebagian atribut key (<i>fully functionally dependent</i>)</string>
    <string name="nk2">Untuk normalisasi ke bentuk 2NF, maka tabel 1NF didekomposisi menjadi beberapa tabel yang masing-masing memenuhi 2NF\n\nBila terdapat ketergantungan parsial maka: <b>eliminate</b></string>
    <string name="nk3">Contoh:\nTerdapat Tabel Workshop dengan atribut NIM, Modul, Biaya, Grade\n\nMemiliki:\nKey\t: NIM + Modul\nFD\t\t: Modul -> Biaya</string>
    <string name="nk4">Tabel 4.5 Modul sudah dalam bentuk normal pertama (1NF), namun <b>belum dalam bentuk normal bentuk kedua (2NF)</b>, karena dalam tabel ini, Biaya tidak bergantung penuh pada atribut kunci (NIM, Modul).\n\nJadi untuk mendapatkan bentuk normal kedua(2NF) perlu memisahkan tabel menjadi dua yaitu tabel Modul dan tabel Biaya seperti pada Tabel 4.6 Modul dan Biaya. Dengan pemisahan tabel, <i>record</i> bisa menjadi lebih efektif. </string>

    <string name="nt1">Suatu relasi disebut memenuhi bentuk normal ketiga (3NF) jika dan hanya jika\n1. Memenuhi bentuk normal kedua (2NF)\n2. Setiap atribut yang bukan kunci tidak tergantung secara fungsional terdahap atribut non-key yang lain dalam relasi tersebut (tidak terdapat ketergantungan transitif pada atribut non-key)</string>
    <string name="nt2">Contoh:\nTerdapat Tabel TPS yang memiliki atribut S, Status, City, P, Qty.\n\nMemiliki:\nKey\t: S + P\nFD\t\t: S -> Status\n\t\t\t\t\tS -> City\n\t\t\t\t\tCity -> Status</string>
    <string name="nt3">Untuk membuat normal bentuk ketiga (3NF) Tabel TPS diatas, maka perlu dilakukan normalisasi tahap pertama (1NF) dengan hasil berikut:</string>
    <string name="nt4">Tabel TPS sudah dalam tahap 1NF, namun masih terdapat masalah berupa:\n1. Redundansi\n2. Anomali, berupa penambahan record pada atribut <b>S, Status, City</b> yang harus menyertakan atribut P dan Q. Menghapus satu baris data juga akan merusak keutuhan informasi.\n\nMaka Solusi yang harus diambil adalah dekomposisi tabel menjadi TPS 1–1 dan TPS 1–2.</string>
    <string name="nt5"><![CDATA[Tabel TPS 1–1 dan TPS 1–2 sudah dalam bentuk 2NF, penambahan data kepada atribut S, Status, dan City bisa dilakukan dengan aman.\n\nTetapi masih ada anomaly: karena City –> Status, maka kita tidak bisa input data City baru sebelum Status punya nilai. Selain itu masih terdapat redundansi pada Status dan City.\n\nPada Tabel TPS 1–2 bisa dikatakan sudah dalam 3NF meskipun memiliki redundansi partial namun tidak memiliki potensi anomaly dan tabel TPS 1–2 lebih baik daripada bentuk tabel sebelumnya karena redundansi dapat diminimalisir.]]></string>
    <string name="nt6"><![CDATA[Pada Tabel TPS 1–1 masih dalam bentuk 2NF karena atribut City mempengaruhi Status (City –> Status) bukan S mempengaruhi Status, maka Tabel TPS 1–1 perlu didekomposisi kembali. Menghasilkan Tabel seperti dibawah ini.]]></string>
    <!-- End Normalisasi Data    -->

    <string name="tahap2pbl">Penentuan Masalah Pokok</string>
    <string name="tahap3pbl">Perencanaan Penyelesaian</string>
    <string name="tahap4pbl">Pelaksanaan Rencana</string>
    <string name="tahap5pbl">Evaluasi</string>

    <!--Kasus Toko-->
    <string name="pertanyaan_toko">Berdasarkan ilustrasi sebelumnya, permasalahan yang dihadapi di dalam toko buku adalah </string>
    <string name="masalah1_toko">Buku terlalu banyak dan membuat komputer tidak sanggup menyimpan banyak data buku</string>
    <string name="masalah2_toko">Komputer untuk mendata buku beroperasi sangat lambat dan menyebabkan susahnya mendata buku</string>
    <string name="masalah3_toko">Toko buku sepi pelanggan</string>
    <string name="masalah4_toko">Tabel untuk mendata buku dalam komputer masih belum berstruktur baik, sehingga menyebabkan kesusahan dalam mendata buku</string>

    <string name="solusi_toko">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_toko">Melakukan normalisasi pada tabel buku, sehingga diperoleh tabel dengan struktur yang baik </string>
    <string name="solusi2_toko">Menghapus beberapa atribut agar tidak menimbulkan redundansi data</string>
    <string name="solusi3_toko">Memeriksa tipe data yang dimiliki tiap atribut agar tidak membuat error</string>
    <string name="solusi4_toko">Membuat diagram entitas toko buku untuk mempermudah dalam pembuatan basis data toko buku</string>

    <string name="evalunf">Tabel Buku belum dalam bentuk normal pertama, karena masih terdapat beberapa field yang kosong / null</string>
    <string name="eval1nf">Untuk mencapai bentuk normal pertama seharusnya mengisi field yang kosong atau null, bukan menghapus record</string>
    <string name="eval2nf">Terdapat beberapa record yang terhapus, seharusnya record tetap utuh</string>
    <string name="eval3nf">Terdapat beberapa record yang terhapus, seharusnya record tetap utuh</string>

    <!--    <string name="penyelesaian_toko">Selesai </string>-->
    <!--End Kasus Toko-->

    <!--Kasus Perpustakaan-->
    <string name="nomor">Nomor</string>
    <string name="jawaban">Jawaban</string>
    <string name="pertanyaan_perpus">Pilihlah beberapa permasalahan yang sesuai dengan paparan yang telah dijelaskan di awal</string>
    <string name="masalah1_perpus">Banyak Atribut yang tidak sesuai di ERD Perpustakaan</string>
    <string name="masalah2_perpus">Pengelola perpustakaan membutuhkan buku baru untuk perpustakaan</string>
    <string name="masalah3_perpus">Banyak anggota yang sering terlambat mengembalikan buku pinjaman dari perpustakaan</string>
    <string name="masalah4_perpus">Relasi antar Entitas Buku dan Anggota di ERD perpustakaan kurang tepat</string>

    <string name="solusi_perpus">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_perpus">Merencanakan ERD perpustakaan yang baru</string>
    <string name="solusi2_perpus">Menghapus beberapa atribut dalam entitas Buku</string>
    <string name="solusi3_perpus">Mengganti rasio kardinalitas pada relasi pinjam</string>
    <string name="solusi4_perpus">Menambahkan entitas baru bernama Denda dan relasi bernama membayar yang terhubung ke atribut Siswa</string>

    <string name="penyelesaian_perpus">Setelah menganalisis permintaan pengelola perpus, maka terbentuklah ERD yang baru.\n\ndalam Entity Relationship Diagram ini ditambahkan entitas Denda dan relasi Bayar, sekarang tugasmu untuk mengisi atribut dan kardinalitas dari relasi yang ada. </string>
    <string name="primary_desc">Primary key merupakan pengidentifikasi suatu atribut yang paling unik dalam himpunan entitas, dan dalam ERD seringkali ditantadi dengan garis bawah</string>
    <string name="denda_desc">Entitas Denda seharusnya memiliki atribut untuk mengetahui biaya denda dan juga berapa lama keterlambatan pengembalian buku</string>
    <string name="bayar_desc">Atribut untuk relasi Bayar seharusnya menjelaskan tentang siapa saja yang perlu membayar denda dan juga berapa total yang harus dibayarkan</string>
    <string name="rasio_desc">Rasio kardinalitas yang dipilih kurang tepat, cermati kembali antara atribut dan relasi yang bersangkutan</string>

    <!--End Kasus Perpustakaan-->
    <!--Kasus Sekolah-->
    <string name="atribut_table_kasussekolah">Atribut</string>
    <string name="tipedata_tabel_kasussekolah">Tipe Data</string>
    <string name="deskripsi_tabel_kasussekolah">Deskripsi</string>
    <string name="nis">NIS</string>
    <string name="nama">Nama</string>
    <string name="tgl_lahir">Tgl_Lahir</string>
    <string name="jenis_kelamin">Jenis_Kelamin</string>
    <string name="kode_mapel">Kode_Mapel</string>
    <string name="nama_mapel">Nama_Mapel</string>
    <string name="hari">Hari</string>
    <string name="jam_mapel">Jam_Mapel</string>
    <string name="nip">NIP</string>
    <string name="kelas">Kelas</string>
    <string name="pendidikan">Pendidikan</string>
    <string name="alamat">Alamat</string>
    <string name="nomor_hp">Nomor_HP</string>

    <string name="pertanyaan_sekolah">Berdasarkan ilustrasi sebelumnya, masalah apa saja yang dimiliki Edi?</string>
    <string name="masalah1_sekolah">SMP Harapan Bangsa sistem manajemen yang kurang optimal </string>
    <string name="masalah2_sekolah">SMP Harapan Bangsa tidak memiliki sistem manajemen untuk sekolah</string>
    <string name="masalah3_sekolah">Tidak ada siswa yang mendaftar di SMP Harapan Bangsa</string>
    <string name="masalah4_sekolah">SMP Harapan Bangsa tidak memiliki guru dan tenaga non-pendidik</string>

    <string name="solusi_sekolah">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_sekolah">Membuat database sekolah untuk mengatur jadwal pelajaran siswa dengan membuat entitas siswa, guru, dan mata pelajaran</string>
    <string name="solusi2_sekolah">Mengoptimalkan sistem manajemen data yang sudah ada di SMP Harapan Bangsa</string>
    <string name="solusi3_sekolah">Membuat database sekolah untuk memanajemen data siswa, guru dan tenaga non-pendidik</string>
    <string name="solusi4_sekolah">Membuat sistem informasi untuk mendapatkan guru dan tenaga non-pendidik</string>

    <string name="penyelesaian_sekolah">Setelah dilakukan analisis kebutuhan untuk menyelesaikan permasalahan di SMP Harapan Bangsa, sudah terdapat beberapa atribut yang akan digunakan, namun belum terisi tipe data dari tiap atribut.\n\nPilihlah tipe data yang sesuai dengan atribut berikut : </string>
    <string name="varchar_desc">Seharusnya menggunakan tipe data VARCHAR, karena tipe data VARCHAR digunakan untuk menyimpan karakter. Panjang String yang di input flexible sesuai dengan banyak karakter yang di input</string>
    <string name="int_desc">Seharusnya menggunakan tipe data INT, karena tipe data INT digunakan untuk menyimpan nilai bilangan bulat desimal</string>
    <string name="date_desc">Seharusnya menggunakan tipe data DATE, karena tipe data DATE digunakan untuk menyimpan keterangan berupa tanggal yang dimulai dari 1 Januari 4712 SM sampai 31 Desember 9999 M</string>
    <!--End Kasus Sekolah-->

    <!--Kasus Rumah Sakit-->
    <string name="ketergantungan_penuh">Ketergantungan Penuh</string>
    <string name="ketergantungan_sepenuhnya">Ketergantungan Sepenuhnya</string>
    <string name="FD"><![CDATA[->]]></string>
    <string name="FULLD"><![CDATA[<->]]></string>

    <string name="pertanyaan_rs">Berdasarkan ilustrasi sebelumnya, masalah apa saja yang dimiliki Edi?</string>
    <string name="masalah1_rs">Operasi dilaksanakan tiap hari </string>
    <string name="masalah2_rs">Dokter melakukan operasi pada waktu yang sudah ditentukan</string>
    <string name="masalah3_rs">Beberapa dokter bertanggung jawab pada satu operasi pasien</string>
    <string name="masalah4_rs">Dokter bisa ditugaskan pada banyak operasi</string>

    <string name="solusi_rs">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_rs">Menentukan ketergantungan dependensi berdasarkan tabel dan analisa permasalahan dari tahap sebelumnya</string>
    <string name="solusi2_rs">Membuat tabel dan atribut baru untuk memudahkan menentukan ketergantungan fungsional dari operasi yang dilakukan dokter</string>
    <string name="solusi3_rs">Menambahkan atribut pengawas sebagai pengamat dokter yang sedang melakukan operasi</string>
    <string name="solusi4_rs">Menghapus atribut tanggal agar tidak terjadi redundansi dan memudahkan menentukan ketergantungan fungsional tabel operasi</string>

    <string name="penyelesaian_rs">Setelah dilakukan analisis dan menghasilkan Tabel Operasi, langkah selanjutnya adalah mencari ketergantungan fungsionalitas pada tabel.\n\n Pilihlah atribut yang memiliki ketergantungan penuh dan ketergantungan sepenuhnya pada Tabel Operasi berikut: </string>
    <string name="evalfull">Atribut yang dipilih tidak memiliki ketergantungan penuh</string>
    <string name="evalsepenuhnyaR">Atribut yang dipilih tidak memiliki ketergantungan sepenuhnya, seharusnya memilih atribut pasien karena atribut pasien dipengaruhi oleh beberapa atribut</string>
    <string name="evalsepenuhnyaP">Beberapa atribut yang dipilih tidak mempengaruhi ketergantungan dari atribut pasien</string>
    <string name="evalmirip">Terdapat beberapa atribut yang dipilih dengan nama yang sama, cermati kembali pilihan anda</string>

    <!--End Rumah Sakit-->


    <string name="quiz_hirarki_basis_data">Quiz Hirarki Basis Data</string>

    <string name="video_pembelajaran_hirarki_basis_data">Video Pembelajaran Hirarki Basis Data</string>
    <string name="video_pembelajaran_ketergantungan_fungsional">Video Pembelajaran Ketergantungan Fungsional</string>
    <string name="video_pembelajaran_normalisasi">Video Pembelajaran Normalisasi</string>
    <string name="video_pembelajaran_erd">Video Pembelajaran ERD</string>

    <string name="videoHirarki">1kKNJr_5tY8</string>
    <string name="videoErd">exbubj9xDV0</string>
    <string name="videoKetergantungan">7DloY9NVMSQ</string>
    <string name="videoNormalisasi">Q5STQ1qjuuM</string>
    <string name="tabel_siswa">Tabel Siswa</string>
    <string name="tabel_mapel">Tabel Mapel</string>
    <string name="tabel_guru">Tabel Guru</string>
    <string name="tabel_operasi">Tabel Operasi</string>
    <string name="versi_os">Versi OS</string>
    <string name="versi_os_os">: 5.0 - 10.0</string>
    <string name="ram">RAM</string>
    <string name="ram_1gb">: 1GB</string>
    <string name="penyimpanan">Penyimpanan</string>
    <string name="penyimpanan_30">: 30MB</string>
    <string name="koneksi">Koneksi</string>
    <string name="koneksi_4g_wifi">: 4G / Wifi</string>

</resources>
