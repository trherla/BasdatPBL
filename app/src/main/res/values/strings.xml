<resources>
    <string name="app_name">BasdatPBL</string>
    <string name="apk_nm">PBL - Basis Data</string>
    <string name="universitas">Universitas Negeri Malang</string>

    <string name="title_activity_bottom">BottomActivity</string>
    <string name="awal">Home</string>
    <string name="materi">Materi</string>
    <string name="kasus">Kasus</string>
    <string name="kuis">Kuis</string>
    <string name="info">Info</string>

    <string name="judul_hero">PBL-Basdat</string>
    <string name="des_hero">Media pembelajaran Basis Data bermuatan Problem Based Learning untuk siswa SMK Kelas XI Kompetensi Keahlian Rekayasa Perangkat Lunak.</string>
    <string name="materi_hero">Materi yang dapat dipelajari dalam aplikasi ini</string>
    <string name="tujuan_hero">Tujuan dari pembelajaran melalui aplikasi ini</string>
    <string name="des_tujuan_hero">1. Mempermudah proses pembelajaran\n2. Meningkatkan efisiensi proses pembelajaran\n3. Menarik</string>

    <string name="judul_kuis">Kuis</string>
    <string name="des_kuis"> </string>
    <string name="judul_kasus">Kasus</string>
    <string name="des_kasus"> </string>


    <string name="info_des">Aplikasi ini dikembangkan untuk menunjang pembelajaran mata pelajaran Basis Data Kelas XI. Aplikasi ini dapat berjalan dengan baik dengan spesifikasi minimun smartphone sebagai berikut:\n\nVersi OS : 5.0 JellyBean - 10.0 Android Ten\nRAM : 1GB</string>

    <!--Materi Hirarki Basis Data-->
    <string name="definisiBasisData">Basis Data atau Database merupakan kumpulan data yang terorganisir, yang umumnya disimpan dan diakses secara elektronik dari suatu sistem komputer.</string>
    <string name="komponen">Basis Data dibangun oleh enam komponen pokok, antara lain:\n\n
        <b>1. <i>Hardware</i></b>\nDalam sistem pengolahan basis data digital, perangkat utama sebagai pengolah data adalah komputer.\n\n
        <b>2. <i>Software</i></b>\nPerangkat lunak digunakan untuk mendukung proses pengelolaan basis data dan bersifat opsional. Misal: bahasa pemrograman C, Pascal.\n\n
        <b>3. <i>Operating System</i></b>\nMerupakan perangkat lunak yang digunakan untuk mengelola aplikasi basis data dan penggunaan sumberdaya komputer.\n\n
        <b>4. <i>Database Management System</i></b> (DBMS)\nMerupakan program aplikasi untuk pengelolaan basis data, seperti <i>Microsoft acces, Oracle</i> dan lian-lain.\n\n
        <b>5. Basis Data Lain</b>\nData lain yang mempunyai keterkaitan dan hubungan dengan basis data itu sendiri.\n\n
        <b>6. <i>User</i></b>\nPengguna yang terlibat dalam pengelolaan dan penggunaan basis data.\n\n </string>
    <string name="dbms">DBMS adalah program aplikasi yang dibuat dan bekerja dalam satu system.\nDBMS didesain untuk membantu dalam hal pemeliharaan dan utilitas kumpulan data dalam jumlah besar.\nDBMS dapat menjadi alternatif penggunaan secara khusus untuk aplikasi, misalnya penyimpanan data dalam field dan menulis kode aplikasi yang spesifik untuk pengaturannya.\n\nKumpulan file (table) yang saling berhubungan dalam di sebuah komputer dan sekumpulan program yang memungkinkan beberapa pemakai dan atau program lain untuk mengakses dan memanipulasi file-file atau table-tabel tersebut. </string>
    <string name="user">Basis Data dibangun oleh enam komponen pokok, antara lain:\n\n
        <b>1. <i>Database Administrator</i></b>\nSeseorang yang mengorganisasi seluruh sistem basis data. Database administrator imemiliki tanggung jawab penuh dalam manajemen database meliputi: pengaturan hak akses, koordinasi dan monitoring serta bertanggung jawab terhadap kebutuhan hardware dan software. Dalam pekerjaannya biasanya dibantu oleh staf Admin.\n\n
        <b>2. <i>Database Designer</i></b>\nSeseorang yang bertugas merancang dan mengembangkan database. database designer bertanggung jawab dalam identifikasi data yang tersimpan dalam database, menentukan struktur data yang tepat untuk disimpan dalam database. Database designer memerlukan koordinasi akan kebutuhan user database.\n\n
        <b>3. <i>Application Programmer</i></b>\nPenggunaa yang berinteraksi dengan basis data melalui Data Manipulation Language (DML). DML meliputi program yang ditulis dalam bahasa pemrograman induk yang dipakai.\n\n
        <b>4. <i>End user</i></b> (DBMS)\nPengguna yang memanfaatkan atau membutuhkan akses ke database melalui query, manambah, merubah menghapus maupun membuat report database. \n\n
        <b>5. <i>System Analyst</i></b>\nPengguna yang merencanakan dan menentukan kebutuhan sistem.\n\n
        <b>6. <i>Application Programmers (Software Engineering)</i></b>\nPengguna tanggung jawabnya berhubungan dengan kebutuhan koneksi database.\n\n
        <b>7. <i>Worker Behind The Scene</i></b>\nIalah pengguna yang tidak tertarik pada database, tetapi lebih cenderung pada membangun data base atau kebutuhannya menggunakan alat bantu.\n\n</string>

    <string name="h1">Arsitektur basis data merupakan suatu kumpulan data yang tersimpan secara sistematik dimana user dapat melihat data dan bagaimana cara user melihat data tersebut.\n\nDalam basis data, data diorganisasikan kedalam bentuk sebagai berikut:</string>
    <string name="h21">Elemen (kolom atau field) data adalah satuan data terkecil yang tidak dapat dipecah lagi menjadi unit lain yang bermakna.\n\nMisalnya data barang terdiri dari KodeBarang, NamaBarang, StokBarang.</string>
    <string name="h22">Rekaman (record) merupakan gabungan sejumlah elemen data yang saling terkait. Istilah lain dari record adalah baris atau tupel.</string>
    <string name="h23">Berkas (file) adalah himpunan seluruh record yang bertipe sama </string>

    <string name="hd1">Abstraksi data adalah gambaran umum untuk melihat data dalam sebuah sistem basis data.\n\nMetode umum yang digunakakn untuk menjelaskan abstraksi dari sistem basis data diformulasikan pada 1978 yang di kenal dengan sebutan <b>ANSI/SPARC</b> (<i>American National Standards Institute/Standard Planning and Requirements Committee</i>) yakni terdapat tiga level yaitu: </string>
    <string name="hd11"><i>Internal / Physical Level</i> Merupakan suatu konsep bagaimana diskripsi detail data disimpan dalam sebuah komputer. Physical data merupakan level rendah (low level) yang mendekati ke data sebenarnya.\n\Dalam physical data menjelaskan definisi data yang meliputi nama atribut, type data (misalnya varchar, integer dll), size atau ukurannya data. \n\nData yang diimplementasikan berupa table yang terdiri dari barisan data dalam kolom (field) dan baris (record).\n\nSetiap DBMS mempunyai aturan-aturan tersendiri dalam membuat definisi, struktur basis data dan tipe data yang digunakan.\n\nContoh Deskripsi struktur tabel Mahasiswa: </string>
    <string name="jenis_jenis_tipe_data_dalam_dbms_oracle">Jenis-jenis tipe data dalam DBMS Oracle</string>
    <string name="hd12"><i>Conceptual / Logical Level</i>: Yang menghubungkan antara internal dan external level. \n\n<i>Conceptual level</i> adalah sebuah representasi seluruh muatan informasi yang dikandung oleh basis data. \n\nTingkatan level ini dilihat dari cara user dalam memahami atau mengetahui data.</string>
    <string name="hd13"><i>External / View Level</i>: Berhubungan dengan bagaimana data direpresentasikan dari sisi setiap user. \n\nView level ini menunjukkan data apa yang ingin user lihat tetapi tidak semuanya ditampilkan. misalnya seorang mahasiswa ingin melihat datanya, tetapi ia tidak dapat melihat data dosen, ataupun mahasiswa lainnya.\n\nKegunaan level ini adalah untuk menyederhanakan interaksi antara pemakai (user) dengan sistem.</string>

    <string name="hm1">Pemodelan data merupakan sekumpulan konsep-konsep untuk mendeskripsikan/menggambarkan struktur data.\n\nTerdapat sejumlah cara dalam merepresentasikan model dalam perancangan basis data. Berikut jenis model data, beberapa yang paling umum yaitu:</string>
    <string name="hm3"><i>1. Hierarchical database model</i></string>
    <string name="hm31">Model hierarkis mengatur data ke dalam struktur mirip pohon, di mana setiap catatan memiliki induk tunggal atau root.\n\nModel ini bagus untuk menggambarkan banyak hubungan dunia nyata. </string>
    <string name="hm4"><i>2. Relational model</i></string>
    <string name="hm41">Model relasional mengurutkan data ke dalam tabel, juga dikenal sebagai relasi, yang masing-masing terdiri dari kolom dan baris.\n\nDi dalam database, tabel dapat dinormalisasi, atau dibawa untuk mematuhi aturan normalisasi yang membuat database fleksibel, mudah beradaptasi, dan dapat diskalakan.\n\nDatabase relasional biasanya ditulis dalam Structured Query Language (SQL).</string>
    <string name="hm5"><i>3. Network model</i></string>
    <string name="hm51">Model jaringan dibangun berdasarkan model hierarkis dengan memungkinkan banyak hubungan antara catatan terkait, yang menyiratkan banyak catatan orang tua (parent records).\n\nSetiap set terdiri dari satu pemilik atau catatan induk dan satu atau lebih anggota atau catatan anak (child records).\n\nRecord dapat menjadi anggota atau anak dalam beberapa set, memungkinkan model ini untuk menyampaikan hubungan yang kompleks. </string>
    <string name="hm6"><i>4. Object-oriented database model</i></string>
    <string name="hm61">Model ini mendefinisikan database sebagai kumpulan objek, atau elemen perangkat lunak yang dapat digunakan kembali, dengan fitur dan metode terkait.\n\nModel database object-oriented adalah model database pasca-relasional yang paling dikenal, karena menggabungkan tabel, tetapi tidak terbatas pada tabel. \n\n Model semacam itu juga dikenal sebagai model basis data hybrid.</string>
    <string name="hm7"><i>5. Entity-relationship model</i></string>
    <string name="hm71">Model ini menangkap hubungan antara entitas dunia nyata seperti model jaringan, namun tidak terkait langsung dengan struktur fisik database.\n\nSering digunakan untuk merancang database secara konseptual.\n\nDi sini, orang-orang, tempat, dan hal-hal tentang titik-titik data yang disimpan disebut sebagai entitas, yang masing-masing memiliki atribut tertentu yang bersama-sama membentuk domain mereka. </string>

    <!--Materi ERD-->
    <string name="ed1"><b><i>Entity Relationship Diagram</i> (ERD)</b> merupakan salah satu bentuk pemodelan basis data yang sering digunakan dalam pengembangan sistem informasi.\n\nDiagram hubungan entitas (ERD) menunjukkan hubungan dari <i>entity set</i> yang disimpan dalam <i>database</i>.\n\nEntitas dalam konteks ini adalah komponen data. Dengan kata lain, diagram ER menggambarkan struktur logis dari database.</string>
    <string name="ed3">Pada dasarnya ada tiga komponen yang digunakan di ERD, yaitu:\n1. Entitas\n2. Atribut\n3. Relasi</string>
    <!--    <string name="ed4">Materi</string>-->

    <string name="ee1">Entitas merupakan objek yang mewakili sesuatu yang nyata dan dapat dibedakan dari sesuatu yang lain. Setiap entitas memiliki beberapa atribut yang mendeskripsikan karakteristik dari objek tersebut. </string>
    <string name="ee2">Entitas dapat berupa :\n\n1. Entity yang bersifat fisik yaitu entitas yang secara fisik dapat dilihat.\nContoh: rumah, kendaraan, guru, murid, dan lain-lain.\n\n2. Entity yang bersifat konsep/logic yaitu entitas yang tidak dapat dilihat secara fisik.\nContoh: pekerjaan, mata pelajaran, rencana, dan lain-lain.</string>
    <string name="ee3">Dalam suatu tabel basis data, entitas identik dengan baris</string>
    <string name="ee4">Sekelompok entitas yang sejenis dan berada dalam lingkup yang sama disebut sebagai Entity Sets (Himpunan Entitas)</string>


    <string name="ea1">Atribut merupakan sifat-sifat atau karakteristik pada suatu entitas.\n\nNama atribut identik dengan nama kolom atau field pada suatu tabel dalam basis data.\n\nSimbol yang digunakan untuk atribut adalah oval/elipse\n\nMacam-macam atribut dalam ERD:</string>
    <!--    <string name="ea2">Nama atribut identik dengan nama kolom atau field pada suatu tabel dalam basis data.</string>-->
    <!--    <string name="ea3">Macam-macam atribut dalam ERD:</string>-->
    <string name="ea31">Atribut Kunci yaitu pengidentifikasi entitas yang paling unik untuk semua entitas dalam himpunan entitas.\n\nAtribut kunci dibedakan menjadi tiga, yaitu:\na. <b><i>Super Key</i></b> adalah satu atau lebih atribut yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas\n\nb. <b><i>Candidate Key</i></b> adalah kumpulan atribut minimal yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas.\n\nc. <b><i>Primmary Key</i></b> adalah salah satu candidate key yang digunakan sebagai pengidentifikasi suatu atribut dalam himpunan entitas. Dasar pemilihan primary key adalah key sering digunakan sebagai acuan, key lebih ringkas, key harus unik</string>
    <string name="ea32">Atribut Deskriptif yaitu atribut lain selain atribut kunci yang berfungsi sebagai penjelasan terhadap entitas dalam himpunan entitas</string>
    <string name="ea33">Atribut Sederhana (Simple Attribute) merupakan atribut yang tidak bisa dibagi menjadi atribut yang lebih mendasar.\nContoh: atribut NIS dari entitas siswa</string>
    <string name="ea34">Atribut Komposit (Composite Attribute) merupakan atribut yang terdiri dari beberapa atribut.\nContoh: atribut nama (memiliki detail nama depan dan nama belakang) dari entitas siswa</string>
    <string name="ea35">Atribut Bernilai Banyak (Multi Valued Attribute) merupakan atribut yang dapat bernilai lebih dari satu nilai sejenis.\nContoh: Hobi</string>
    <string name="ea36">Atribut Bernilai Tunggal (Single Valued Attribute) merupakan atribut yang hanya memiliki satu nilai.\nContoh: NIS</string>
    <string name="ea37">Atribut Turunan (Derived Attribute) merupakan atribut yang nilainya diperoleh dari pengolahan atau dirurunkan dari atribut atau tabel lain.\nContoh: atribut rata-rata yang didapat dari perhitungan nilai siswa</string>
    <string name="ea38">Atribut Bernilai (Mandatory Attribute) merupakan atribut yang harus memiliki nilai.</string>
    <string name="ea39">Atribut Tidak Harus Bernilai (Non-Mandatory Attribute) merupakan atribut yang nilainya boleh kosong (null).</string>

    <string name="er1">Relasi menyatakan hubungan antara dua atau beberapa entitas. Setiap relasi mempunyai batasan (<b><i>constraint</i></b>) terhadap kemungkinan kombinasi entitas yang berpartisipasi. Batasan tersebut ditentukan dari situasi yang diwakili relasi tersebut.</string>
    <string name="er11">Cardinality Ratio Constraint menjelaskan batasan jumlah keterhubungan satu entitas dengan entitas lainnya. Berikut macam-macamnya:</string>
    <string name="er2"><b>One to One (1:1)</b>\nSetiap anggota entitas A hanya boleh berhubungan dengan satu anggota entitas B, begitu pula sebaliknya.</string>
    <string name="er3"><b>One to Many (1:N)</b>\nSetiap anggota entitas A dapat berhubungan dengan lebih dari satu anggota entitas B tetapi tidak sebaliknya.</string>
    <string name="er4"><b>Many to Many (N:N)</b>\nSetiap entitas A dapat berhubungan dengan banyak entitas himpunan entitas B dan demikian pula sebaliknya</string>
    <string name="er5">Klasifikasi relasi berdasarkan derajatnya:\n\n<b>1. Unary Degree</b>\n- Relasi yang hanya melibatkan satu entitas </string>
    <!--    <string name="er51"></string>-->
    <string name="er52"><b>2. Binary Degree</b>\n- Relasi yang melibatkan dua entitas</string>
    <string name="er53"><b>3. Ternary Degree</b>\n- Relasi yang melibatkan tiga entitas</string>


    <string name="eb1">Batasan partisipasi atau batasan hubungan entitas menjelaskan bagaimana data itu berelasi, batasan ini menentukan bagaimana (harus ataukah tidak) berpartisipasi suatu entitas dengan relasinya pada entitas lain. </string>

    <!--Definisi ketergantungan-->
    <string name="kde1">Dependensi merupakan ketergantungan setiap atribut dengan atribut lainnya</string>
    <string name="kde2">Analisis dependensi merupakan konsep <b>penting</b> yang menjadi <b>dasar melakukan normalisasi</b> sehingga diperoleh relasi yang berstruktur baik.\n\nAda beberapa jenis dependensi:\n1. Dependensi Fungsional\n2. Dependensi Sepenuhnya\n3. Dependensi Sebagian\n4. Dependensi Penuh\n5. Dependensi Transitif</string>

    <!--    Ketergantungan fungsional-->
    <string name="kf1">Dependensi fungsional merupakan keterkaitan antara dua atribut atau dua himpunan atribut.\n\n<b>Analogi</b>: terdapat sebuah relasi yang bernama R dengan dua buah atributnya berupa A dan B, sehingga Notasinya R(A,B) </string>
    <string name="kf3">Pada keadaan tersebut, atribut B dikatakan mempunyai dependensi fungsional terhadap A apabila setiap nilai A berhubungan dengan satu nilai yang sama pada B</string>
    <string name="kf31">Dari Tabel Barang diatas ini dapat dinotasikan seperti berikut\n1. KodeBarang -> NamaBarang\n2. KodeBarang -> HargaBarang\n3. KodeBarang -> KodePemasok\n4. KodeBarang -> NamaPemasok\n5. NamaBarang -> KodeBarang\n6. KodePemasok -> NamaPemasok\n7. NamaPemasok -> KodePemasok </string>
    <string name="kf32">Ketergantungan Fungsional diwakili dengan tanda panah seperti ini <b><![CDATA[->]]></b> \n\nPada Notasi KodeBarang -> NamaBarang\nSetiap KodeBarang pasti akan berhubungan dengan hanya sebuah NamaBarang.\n\nContoh: KodeBarang B-001 hanya akan cocok dengan satu NamaBarang yaitu Mirrorless ABV</string>
    <string name="kf33">Notasi singkat:\nKodeBarang -> {NamaBarang, HargaBarang, KodePemasok, NamaPemasok} </string>

    <string name="kf4">Sebuah atribut bisa bergantung pada lebih dari satu atribut\n\n<![CDATA[Notasi : {A,B,…} -> Z]]>\n\nAtribut Z mempunyai dependensi terhadap pasangan A dan B</string>
    <string name="kf41">Pada tabel Guru diatas, memiliki notasi\n\n{NIP, Pendidikan} -> TahunLulus\n\nJadi atribut NIP dan atribut Pendidikan mempengaruhi TahunLulus dari seorang guru </string>


    <!--    Ketergantungan sepenuhnya-->
    <string name="ksp1">Suatu atribut B dikatakan memiliki dependensi sepenuhnya terhadap A apabila\n\n1. Atribut B mempunyai dependensi fungsional terhadap atribut A\n2. Atribut B tidak memiliki dependensi terhadap bagian dari atribut A </string>
    <string name="ksp2">Contoh:\n{NIP, Pendidikan}-> TahunLulus\n\nNotasi berikut merupakan salah satu contoh ketergantungan sepenuhnya, karena TahunLulus bergantung dari dua atribut yaitu NIP dan Pendidikan</string>
    <!--    <string name="ksp3">2. Atribut B tidak memiliki dependensi terhadap bagian dari atribut A</string>-->


    <!--Ketergantungan sebagian -->
    <string name="ks1">Suatu atribut B dikatakan memiliki dependensi sebagian/parsial terhadap A apabila:\n\n1. Atribut B adalah atribut non-key primer dan atribut A adalah primary key\n2. Atribut B memiliki dependensi terhadap sebagian dari atribut A (tidak terhadap keseluruhan atribut A)</string>
    <string name="ks2"><b>Contoh</b>:\nTabel Guru dikatakan memiliki kunci primer berupa (NIP dan Pendidikan)\n\nJadi ketergantungan parsial yang terdapat pada tabel Guru berupa JenisKelamin karena memiliki ketergantungan terhadap atribut NIP saja (bagian dari kunci primer). Begitu pula dengan atribut NamaGuru.</string>


    <!--    Ketergantungan penuh-->
    <string name="kpe1">Suatu atribut B dikatakan memiliki dependensi penuh/total terhadap A apabila\n\n1. Atribut B mempunyai dependensi fungsional terhadap atribut A\n2. Atribut A mempunyai dependansi fungsional terhadap atribut B</string>
    <string name="kpe2">Dependensi Total memiliki notasi <![CDATA[A<->B]]>\n\n<b>Contoh</b>:\n1. KodePemasok -> NamaPemasok\n2. NamaPemasok -> KodePemasok\n\nDengan demikian :\nKodePemasok <![CDATA[<->]]> NamaPemasok\nDengan asumsi: tidak ada nama pemasok yang sama\n\n<b>Contoh lain</b>:\nHargaBarang tidak dapat dikatakan dependensi total terhadap KodeBarang dikarenakan terdapat kemungkinan harga yang sama untuk kode barang yang berbeda.\nBegitu juga dengan atribut NamaPemasok tidak dapat dependensi total terhadap KodeBarang, karena pemasok bisa saja menaruh banyak barang ke toko </string>


    <!--Ketergantungan Transitif    -->
    <string name="kt1">Dependensi Transitif biasanya terjadi pada tabel hasil relasi, atau kondisi dimana terdapat tiga atribut A, B, C.\n\nNotasinya adalah A -> B dan B -> C.\nMaka C dikatakan sebagai dependensi transitif terhadap A melalui B.</string>
    <string name="kt2"><b>Contoh</b>: Tabel Barang\nKodeBarang -> NamaPemasok\n\nKarena, KodeBarang -> KodePemasok dan Kode Pemasok -> NamaPemasok\n\nJadi:\n KodeBarang -> KodePemasok -> NamaPemasok</string>

    <!--Normalisasi Data    -->
    <string name="nd1">Normalisasi adalah suatu proses yang digunakan untuk menentukan pengelompokan atribut dalam sebuah relasi sehingga diperoleh relasi berstruktur baik</string>
    <string name="nd2">Syarat relasi berstruktur baik:\n1. Mengandung redundansi yang sedikit mungkin.\n2. Memungkinkan baris-baris dalam relasi disisipkan, dimodifikasi, dan dihapus tanpa menimbulkan kesalahan atau ketidakkonsistenan.</string>
    <string name="nd3">Normalisasi dilakukan melalui setiap bentuk form (1NF sampai dengan 5NF)</string>

    <string name="nd4">Normalisasi tidak selalu dimulai dari Bentuk tidak ternormalisasi (UNF), namun bisa saja dimulai dari tahap 1NF maupun 2NF tergantung dari tabel yang anda buat terlebih dahulu.</string>

    <string name="np1">Suatu relasi disebut memenuhi bentuk normal pertama (1NF) jika dan hanya jika setiap atribut dari relasi tersebut hanya memiliki <b>nilai tunggal</b> dan <b>tidak ada pengulangan grup atribut dalam baris</b>.\n\nBentuk 1NF tidak boleh mengandung grup atribut yang berulang</string>
    <string name="np2">Contoh:\nTerdapat Tabel Siswa yang memiliki atribut NIS, Nama, dan Hobi. Kalau diperhatikan, atribut Hobi memiliki nilai banyak dan seharusnya tidak diperbolehkan didalam tabel.</string>
    <string name="np3">Maka perlu dilakukan normalisasi bentuk pertama pada atribut hobi sehingga setiap atribut hanya memiliki satu nilai, seperti tabel dibawah ini:</string>
    <string name="np4">Contoh Lain:\nTerdapat Tabel Buku yang memiliki atribut ISBN, TahunTerbit, IdPengarang, NamaPengarang. Namun dalam contoh kali ini terdapat pengulangan grup atribut yaitu di IdPengarang dan NamaPengarang</string>
    <string name="np5">Maka yang perlu dilakukan adalah menghapus atribut IdPengarang dan NamaPengarang dan membuat record baru.</string>

    <string name="nk1">Suatu relasi disebut memenuhi bentuk normal kedua (2NF) jika dan hanya jika\n1. Memenuhi bentuk normal pertama (1NF)\n2. Setiap atribut yang bukan primary key tergantung secara fungsional terhadap semua atribut key dan bukan hanya sebagian atribut key (<i>fully functonally dependent</i>)</string>
    <string name="nk2">Untuk normalisasi ke bentuk 2NF, maka tabel 1NF didekomposisi menjadi beberapa tabel yang masing-masing memenuhi 2NF\n\nBila terdapat ketergantungan parsial maka: <b>eliminate</b></string>
    <string name="nk3">Contoh:\nTerdapat Tabel Workshop dengan atribut NIM, Modul, Biaya, Grade\n\nMemiliki:\nKey\t: NIM + Modul\nFD\t\t: Modul -> Biaya</string>
    <string name="nk4">Tabel diatas sudah normal bentuk pertama (1NF), namun <b>belum dalam bentuk normal bentuk kedua (2NF)</b>, karena dalam tabel ini, Biaya tidak bergantung penuh pada atribut kunci (NIM, Modul).\n\nJadi untuk mendapatkan bentuk normal kedua(2NF) perlu memisahkan tabel seperti gambar dibawah ini. Dengan pemisahan tabel, record bisa menjadi lebih efektif. </string>


    <string name="nt1">Suatu relasi disebut memenuhi bentuk normal ketiga (3NF) jika dan hanya jika\n1. Memenuhi bentuk normal kedua (2NF)\n2. Setiap atribut yang bukan kunci tidak tergantung secara fungsional terdahap atribut non-key yang lain dalam relasi tersebut (tidak terdapat ketergantungan transitif pada atribut non-key)</string>
    <string name="nt2">Contoh:\nTerdapat Tabel TPS yang memiliki atribut S, Status, City, P, Qty.\n\nMemiliki:\nKey\t: S + P\nFD\t\t: S -> Status\n\t\t\t\t\tS -> City\n\t\t\t\t\tCity -> Status</string>
    <string name="nt3">Untuk membuat normal bentuk ketiga (3NF) Tabel TPS diatas, maka perlu dilakukan normalisasi tahap pertama (1NF) dengan hasil berikut:</string>
    <string name="nt4">Tabel TPS sudah dalam tahap 1NF, namun masih terdapat masalah berupa:\n1. Redundansi\n2. Anomali, berupa penambahan record pada atribut <b>S, Status, City</b> yang harus menyertakan atribut P dan Q. Menghapus satu baris data juga akan merusak keutuhan informasi.\n\nMaka Solusi yang harus diambil adalah dekomposisi tabel menjadi TPS 1–1 dan TPS 1–2.</string>
    <string name="nt5"><![CDATA[Tabel TPS 1–1 dan TPS 1–2 sudah dalam bentuk 2NF, penambahan data kepada atribut S, Status, dan City bisa dilakukan dengan aman.\n\nTetapi masih ada anomaly: karena City –> Status, maka kita tidak bisa input data City baru sebelum Status punya nilai. Selain itu masih terdapat redundansi pada Status dan City.\n\nPada Tabel TPS 1–2 bisa dikatakan sudah dalam 3NF meskipun memiliki redundansi partial namun tidak memiliki potensi anomaly dan tabel TPS 1–2 lebih baik daripada bentuk tabel sebelumnya karena redundansi dapat diminimalisir.]]></string>
    <string name="nt6"><![CDATA[Pada Tabel TPS 1–1 masih dalam bentuk 2NF karena atribut City mempengaruhi Status (City –> Status) bukan S mempengaruhi Status, maka Tabel TPS 1–1 perlu didekomposisi kembali. Menghasilkan Tabel seperti dibawah ini.]]></string>

    <string name="apa_itu_arsitektur_basis_data">Apa Itu Arsitektur Basis Data?</string>

    <string name="tahap2pbl">Penentuan Masalah Pokok</string>
    <string name="tahap3pbl">Perencanaan Penyelesaian</string>
    <string name="tahap4pbl">Pelaksanaan Rencana</string>
    <string name="tahap5pbl">Evaluasi</string>
<!--Kasus Perpustakaan-->
    <string name="pertanyaan_perpus">Pilihlah beberapa permasalahan yang sesuai dengan kasus yang telah dijelaskan di awal</string>
    <string name="masalah1_perpus">Kesalahan Atribut</string>
    <string name="masalah2_perpus">Terdapat Entitas yang tidak sesuai dengan database perpustakaan</string>
    <string name="masalah3_perpus">Penggunaan Notasi E-R Diagram yang salah</string>
    <string name="masalah4_perpus">Ketidakcocokan Relasi antar Entitas</string>

    <string name="solusi_perpus">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_perpus">Membuat database sekolah untuk mengatur jadwal pelajaran siswa dengan membuat entitas siswa, guru, dan mata pelajaran</string>
    <string name="solusi2_perpus">Ini Solusi 3</string>
    <string name="solusi3_perpus">Solusi 4 mah</string>
    <string name="solusi4_perpus">Yang ini 5 deh</string>
<!--End Kasus Perpustakaan-->
<!--Kasus Sekolah-->
    <string name="pertanyaan_sekolah">Berdasarkan ilustrasi sebelumnya, masalah apa saja yang dimiliki Edi?</string>
    <string name="masalah1_sekolah">SMP Harapan Bangsa sistem manajemen yang kurang optimal </string>
    <string name="masalah2_sekolah">SMP Harapan Bangsa tidak memiliki sistem manajemen untuk sekolah</string>
    <string name="masalah3_sekolah">Tidak ada siswa yang mendaftar di SMP Harapan Bangsa</string>
    <string name="masalah4_sekolah">SMP Harapan Bangsa tidak memiliki guru dan tenaga non-pendidik</string>

    <string name="solusi_sekolah">Pilihlah beberapa solusi yang tepat sesuai dengan permasalahan yang telah dipilih</string>
    <string name="solusi1_sekolah">Membuat database sekolah untuk mengatur jadwal pelajaran siswa dengan membuat entitas siswa, guru, dan mata pelajaran</string>
    <string name="solusi2_sekolah">Mengoptimalkan sistem manajemen data yang sudah ada di SMP Harapan Bangsa</string>
    <string name="solusi3_sekolah">Membuat database sekolah untuk memanajemen data siswa, guru dan tenaga non-pendidik</string>
    <string name="solusi4_sekolah">Membuat sistem informasi untuk mendapatkan guru dan tenaga non-pendidik</string>

    <string name="penyelesaian_sekolah">Setelah dilakukan analisis kebutuhan untuk menyelesaikan permasalahan di SMP Harapan Bangsa, sudah terdapat beberapa atribut yang akan digunakan, namun belum terisi tipe data dari tiap atribut.\n\nPilihlah tipe data yang sesuai dengan atribut berikut : </string>

    <!--End Kasus Sekolah-->
    <string name="image">image</string>
    <string name="file"><b><i>File</i></b></string>
    <string name="record"><b><i>Record</i></b></string>
    <string name="field"><b><i>Field</i></b></string>
    <string name="_1_internal_level">1. <i>Internal Level</i></string>
    <string name="_2_conceptual_level">2. <i>Conceptual Level</i></string>
    <string name="_3_view_level">3. <i>View Level</i></string>
    <string name="atribut_tidak_harus_bernilai">9. Atribut Tidak Harus bernilai</string>
    <string name="atribut_bernilai">8. Atribut Bernilai</string>
    <string name="atribut_turunan">7. Atribut Turunan</string>
    <string name="atribut_bernilai_tunggal">6. Atribut Bernilai Tunggal</string>
    <string name="atribut_bernilai_banyak">5. Atribut Bernilai Banyak</string>
    <string name="atribut_komposit">4. Atribut Komposit</string>
    <string name="atribut_sederhana">3. Atribut Sederhana</string>
    <string name="atribut_deskriptif">2. Atribut Deskriptif</string>
    <string name="atribut_kunci">1. Atribut Kunci</string>
    <string name="relasi_berdasarkan_derajatnya">Relasi Berdasarkan Derajatnya</string>
    <string name="kardinalitas">Kardinalitas</string>
    <string name="quiz_hirarki_basis_data">Quiz Hirarki Basis Data</string>

    <string name="videoHirarki">ioNng23DkIM</string>
    <string name="videoErd">1kKNJr_5tY8</string>
    <string name="videoKetergantungan">2S24-y0Ij3Y</string>
    <string name="videoNormalisasi">IHNzOHi8sJs</string>

    <string name="kecepatan"><b>Kecepatan</b>\n\nMudah dan cepat dalam melakukan penyimpanan, perubahan dan menampilkan kembali.</string>
    <string name="efisiensi"><b>Efisiensi</b>\n\nMampu mengurangi pengulangan atau redundansi data.</string>
    <string name="ketersediaan"><b>Ketersediaan</b>\n\nData selalu siap dipakai.</string>
    <string name="keamanan"><b>Keamanan</b>\n\nData lebih aman dengan perbedaan hak akses pengguna.</string>
    <string name="kebersamaan"><b>Kebersamaan</b>\n\nData yang dikelola oleh sistem mendukung lingkungan banyak pemakai</string>
    <string name="keakuratan"><b>Keakuratan</b>\n\nData lebih terjaga dan akurat dengan menerapkan aturan dan batasan tertentu</string>

    <string name="tujuan_penggunaan_basis_data">Tujuan Penggunaan Basis Data</string>
    <string name="apa_itu_basis_data">Apa itu Basis Data?</string>
    <string name="komponen_basis_data">Komponen Basis Data</string>
    <string name="pengguna_basis_data">Pengguna Basis Data</string>
    <string name="ulangi_kuis">Ulangi Kuis</string>
    <string name="halaman_awal">Halaman Awal</string>
    <string name="basis_data">Basis Data</string>
    <string name="penjelasan_menu">1. Penjelasan Menu</string>
    <string name="cara_mengerjakan_kasus">2. Cara Mengerjakan Kasus</string>
    <string name="cara_mengerjakan_kuis">3. Cara Mengerjakan Kuis</string>
    <string name="informasi_pengembang">4. Informasi Pengembang</string>
    <string name="atribut_table_kasussekolah">Atribut</string>
    <string name="tipedata_tabel_kasussekolah">Tipe Data</string>
    <string name="deskripsi_tabel_kasussekolah">Deskripsi</string>
    <string name="nis">NIS</string>
    <string name="nama">Nama</string>
    <string name="tgl_lahir">Tgl_Lahir</string>
    <string name="jenis_kelamin">Jenis_Kelamin</string>
    <string name="kode_mapel">Kode_Mapel</string>
    <string name="nama_mapel">Nama_Mapel</string>
    <string name="hari">Hari</string>
    <string name="jam_mapel">Jam_Mapel</string>
    <string name="nip">NIP</string>
    <string name="kelas">Kelas</string>
    <string name="pendidikan">Pendidikan</string>
    <string name="alamat">Alamat</string>
    <string name="nomor_hp">Nomor_HP</string>
    <string name="varchar_desc">Seharusnya menggunakan tipe data VARCHAR, karena tipe data VARCHAR digunakan untuk menyimpan karakter. Panjang String yang di input flexible sesuai dengan banyak karakter yang di input</string>
    <string name="int_desc">Seharusnya menggunakan tipe data INT, karena tipe data INT digunakan untuk menyimpan nilai bilangan bulat desimal</string>
    <string name="date_desc">Seharusnya menggunakan tipe data DATE, karena tipe data DATE digunakan untuk menyimpan keterangan berupa tanggal yang dimulai dari 1 Januari 4712 SM sampai 31 Desember 9999 M</string>
</resources>
