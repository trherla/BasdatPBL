<resources>
    <string name="app_name">BasdatPBL</string>
    <string name="apk_nm">PBL - Basis Data</string>
    <string name="universitas">Universitas Negeri Malang</string>

    <string name="title_activity_bottom">BottomActivity</string>
    <string name="awal">Home</string>
    <string name="materi">Materi</string>
    <string name="kasus">Kasus</string>
    <string name="kuis">Kuis</string>

    <!--Materi Hirarki Basis Data-->
    <string name="h1">Arsitektur basis data merupakan suatu kumpulan data yang tersimpan secara sistematik dimana user dapat melihat data dan bagaimana cara user melihat data tersebut</string>
    <string name="h2">Dalam basis data, data diorganisasikan kedalam bentuk sebagai berikut:</string>
    <string name="h21">• Elemen (kolom atau field) data adalah satuan data terkecil yang tidak dapat dipecah lagi menjadi unit lain yang bermakna. Misalnya data siswa terdiri dari NIS, Nama, Alamat, Telepon atau Jenis Kelamin.</string>
    <string name="h22">• Rekaman (record) merupakan gabungan sejumlah elemen data yang saling terkait. Istilah lain dari record adalah baris atau tupel.</string>
    <string name="h23">• Berkas(file) adalah himpunan seluruh record yang bertipe sama </string>

<!--    <string name="hd1">While a database is a repository of data, a database management system, or simply DBMS, is a set of software tools that control access, organize, store, manage, retrieve and maintain data in a database. In practical use, the terms database, database server, database system, data server, and database management systems are often used interchangeably. Why do we need database software or a DBMS? Can we not just store data in simple text files for example? The answer lies in the way users access the data and the handle of corresponding challenges. First, we need the ability to have multiple users insert, update and delete data to the same data file without "stepping on each other's toes". This means that different users will not cause the data to become inconsistent, and no data should be inadvertently lost through these operations. We also need to have a standard interface for data access, tools for data backup, data restore and recovery, and a way to handle other challenges such as the capability to work with huge volumes of data and users. Database software has been designed to handle all of these challenges. The most mature database systems in production are relational database management systems (RDBMSs). RDBMSs serve as the backbone of applications in many industries including banking, transportation, health, and so on. The advent of Web-based interfaces has only increased the volume and breadth of use of RDBMS, which serve as the data repositories behind essentially most online commerce.</string>-->
    <string name="hd1">Data merupakan suatu pendekatan yang ditujukan untuk kepentingan abstraksi data. Metode umum yang digunakakn untuk menjelaskan arsitektur dari sistem basis data diformulasikan pada 1978 yang di kenal dengan sebutan ANSI/SPARC (American National Standards Institute/ Standard Planning and Requirements Committee) yakni terdapat tiga level yaitu: </string>
    <string name="hd11">1. Internal/ Physical Level: berhubungan dengan bagaimana data disimpan secara fisik (physical storage). Internal level adalah level terendah untuk merepresentasikan basis data. Record disimpan dalam media penyimpanan dalam format byte. Didefinisikan sebagai sebuah skema internal.</string>
    <string name="hd12">2. External / View Level: berhubungan dengan bagaimana data direpresentasikan dari sisi setiap user. View level adalah level user, yang dimaksud dengan user adalah programmer, end user atau Database Administrator (DBA). (programmer : bahasa yang digunakan adalah bahasa pemrograman seperti C, COBOL, atau PL/I), (end user : bahasa yang digunakan adalah bahasa query atau menggunakan fasilitas yang tersedia pada program aplikasi pada level eksternal ini, user dibatasi pada kemampuan perangkat keras dan perangkat lunak yang digunakan aplikasi basis data yang didefinisikan sebagai sebuah skema eksternal.)</string>
    <string name="hd13">3. Conceptual/ Logical Level: Yang menghubungkan antara internal dan external level. Conceptual level adalah sebuah representasi seluruh muatan informasi yang dikandung oleh basis data. Tingkatan level ini dilihat dari cara user dalam memahami atau mengetahui data.</string>

    <string name="hm1">Pemodelan data merupakan sekumpulan konsep-konsep untuk mendeskripsikan/menggambarkan struktur data</string>
    <string name="hm2">Terdapat sejumlah cara dalam merepresentasikan model dalam perancangan basis data. Secara umum pemodelan data dapat dikelompokkan menjadi dua yaitu :</string>
    <string name="hm3">1. Object-based Logical Model</string>
    <string name="hm31">Dalam pemodelan ini struktur atau hirarki basis data diilustrasikan berdasarkan object. Model ini meliputi: 1) Entity Relationalship Model. 2) Object-Oriented Model. 3) Semantic Data Model. 4) Function Data Model.</string>
    <string name="hm4">2. Record-based Logical Model</string>
    <string name="hm41">Dalam model ini struktur basis data diilustrasikan berdasarkan record. Model ini meliputi: 1) Relational Model. 2) Hierarchical Model 3) Network Model.</string>
    <string name="hm5">a</string>

    <string name="hp1">Like any other work profile, the database domain has several of roles and career paths associated with it. The following is a description of some of these roles. </string>
    <string name="hp2">1.5.1 Data Architect </string>
    <string name="hp3">1.5.2 Database Architect </string>
    <string name="hp4">1.5.3 Database Administrator (DBA) </string>
    <string name="hp5">1.5.4 Application Developer  </string>

    <!--Materi ERD-->
    <string name="ed1">Entity Relationship Diagram (ERD) merupakan salah satu bentuk pemodelan basis data yang sering digunakan dalam pengembangan sistem informasi.</string>
    <string name="ed2">Diagram hubungan entitas (ERD) menunjukkan hubungan dari entitas set disimpan dalam database. Entitas dalam konteks ini adalah komponen data.Dengan kata lain, diagram ER menggambarkan struktur logis dari database.</string>
    <string name="ed3">Pada dasarnya ada tiga komponen yang digunakan di ERD, yaitu</string>
    <string name="ed31">1. Entitas</string>
    <string name="ed32">2. Atribut</string>
    <string name="ed33">3. Relasi</string>
<!--    <string name="ed4">Materi</string>-->

    <string name="ee1">Entitas merupakan objek yang mewakili sesuatu yang nyata dan dapat dibedakan dari sesuatu yang lain. Setiap entitas memiliki beberapa atribut yang mendeskripsikan karakteristik dari objek tersebut. </string>
    <string name="ee2">Entitas dapat berupa :</string>
    <string name="ee21">1. Entity yang bersifat fisik yaitu entitas yang secara fisik dapat dilihat (misal: rumah, kendaraan, guru, murid, dan lain-lain)</string>
    <string name="ee22">2. Entity yang bersifat konsep/logic yaitu entitas yang tidak dapat dilihat secara fisik (misal: pekerjaan, mata pelajaran, rencana, dan lain-lain)</string>
    <string name="ee3">Dalam suatu tabel basis data, entitas identik dengan baris</string>
    <string name="ee4">Sekelompok entitas yang sejenis dan berada dalam lingkup yang sama disebut sebagai Entity Sets (Himpunan Entitas)</string>


    <string name="ea1">Atribut merupakan sifat-sifat atau karakteristik pada suatu entitas.</string>
    <string name="ea2">Nama atribut identik dengan nama kolom atau field pada suatu tabel dalam basis data.</string>
    <string name="ea3">Macam-macam atribut dalam ERD:</string>
    <string name="ea31">1.Atribut Kunci yaitu pengidentifikasi entitas yang paling unik untuk semua entitas dalam himpunan entitas. Atribut kunci dibedakan menjadi tiga, yaitu:</string>
    <string name="ea311">Super Key adalah satu atau lebih atribut yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas</string>
    <string name="ea312">Candidate Key adalah kumpulan atribut minimal yang dapat membedakan entitas satu dengan lainnya dalam himpunan entitas</string>
    <string name="ea313">Primmary Key adalah salah satu candidate key yang digunakan sebagai pengidentifikasi suatu atribut dalam himpunan entitas. Dasar pemilihan primary key adalah key sering digunakan sebagai acuan, key lebih ringkas, key harus unik</string>
    <string name="ea32">2. Atribut Deskriptif yaitu atribut lain selain atribut kunci yang berfungsi sebagai penjelasan terhadap entitas dalam himpunan entitas</string>
    <string name="ea33">3. Atribut Sederhana (Simple Attribute) yaitu atribut yang tidak bisa dibagi menjadi atribut yang lebih mendasar. Contoh: atribut NIS dari entitas siswa</string>
    <string name="ea34">4. Atribut Komposit (Composite Attribute) yaitu atribut yang terdiri dari beberapa atribut. Contoh: atribut nama (memiliki detail nama depan dan nama belakang) dari entitas siswa</string>
    <string name="ea35">5. Atribut Bernilai Banyak (Multi Valued Attribute) yaitu atribut yang dapat bernilai lebih dari satu nilai sejenis. Contoh: Hobi</string>
    <string name="ea36">6. Atribut Bernilai Tunggal (Single Valued Attribute) yaitu atribut yang hanya memiliki satu nilai. Contoh: NIS</string>
    <string name="ea37">7. Atribut Turunan (Derived Attribute) yaitu atribut yang nilainya diperoleh dari pengolahan atau dirurunkan dari atribut atau tabel lain. Contoh: atribut rata-rata yang didapat dari perhitungan nilai siswa</string>
    <string name="ea38">8. Atribut Bernilai (Mandatory Attribute) yaitu atribut yang harus memiliki nilai</string>
    <string name="ea39">8. Atribut Tidak Harus Bernilai (Non-Mandatory Attribute) yaitu atribut yang nilainya boleh kosong (null)</string>


    <string name="ea4">Simbol yang digunakan untuk atribut adalah oval/elipse</string>

    <string name="er1">Relasi menyatakan hubungan antara dua atau beberapa entitas. Setiap relasi mempunyai batasan (constraint) terhadap kemungkinan kombinasi entitas yang berpartisipasi. Batasan tersebut ditentukan dari situasi yang diwakili relasi tersebut.</string>
    <string name="er11">Cardinality Ratio Constraint menjelaskan batasan jumlah keterhubungan satu entitas dengan entitas lainnya. Berikut macam-macamnya:</string>
    <string name="er2">One to One (1:1)</string>
    <string name="er21">Setiap anggota entitas A hanya boleh berhubungan dengan satu anggota entitas B, begitu pula sebaliknya.</string>
    <string name="er3">One to Many (1:N)</string>
    <string name="er31">Setiap anggota entitas A dapat berhubungan dengan lebih dari satu anggota entitas B tetapi tidak sebaliknya.</string>
    <string name="er4">Many to Many (N:N)</string>
    <string name="er41">Setiap entitas A dapat berhubungan dengan banyak entitas himpunan entitas B dan demikian pula sebaliknya</string>
    <string name="er5">Klasifikasi relasi berdasarkan derajatnya: </string>
    <string name="er51">Unary Degree - Relasi yang hanya melibatkan satu entitas</string>
    <string name="er52">Binary Degree - Relasi yang melibatkan dua entitas</string>
    <string name="er53">Ternary Degree - Relasi yang melibatkan tiga entitas</string>




    <string name="eb1">Batasan partisipasi atau batasan hubungan entitas menjelaskan bagaimana data itu berelasi, batasan ini menentukan bagaimana (harus ataukah tidak) berpartisipasi suatu entitas dengan relasinya pada entitas lain. </string>
    <string name="eb2">Materi</string>
    <string name="eb3">Materi</string>
    <string name="eb4">Materi</string>

    <!--Definisi ketergantungan-->
    <string name="kde1">Dependensi merupakan ketergantungan setiap atribut dengan atribut lainnya</string>
    <string name="kde2">Analisis dependensi merupakan konsep penting yang menjadi dasar melakukan normalisasi sehingga diperoleh relasi yang berstruktur baik.</string>
    <string name="kde3">Ada beberapa jenis dependensi</string>
    <string name="kde31">1. Dependensi Fungsional</string>
    <string name="kde32">2. Dependensi Sepenuhnya</string>
    <string name="kde33">3. Dependensi Sebagian</string>
    <string name="kde34">4. Dependensi Penuh</string>
    <string name="kde35">5. Dependensi Transitif</string>

    <string name="kde4">Konsep penting yang menjadi dasar melakukan normalisasi relasi-relasi dalam perancangan sistem database adalah functional dependency atau ketergantungan fungsional. Tanpa memahami konsep functional dependency atau ketergantungan fungsional kita tidak bisa melakukan proses normalisasi dengan baik dan benar. Functional dependency atau ketergantungan fungsional adalah suatu konsep yang menjelaskan tentang relationship/asosiasi/hubungan antara atribut-atribut dalam suatu relasi. </string>

    <!--    Ketergantungan fungsional-->
    <string name="kf1">Dependensi fungsional merupakan keterkaitan antara dua atribut atau dua himpunan atribut </string>
    <string name="kf2">Analogi: terdapat sebuah relasi yang bernama R dengan dua buah atributnya berupa A dan B, sehingga Notasinya R(A,B)</string>
    <string name="kf3">Pada keadaan tersebut, atribut B dikatakan mempunyai dependensi fungsional terhadap A apabila setiap nilai A berhubungan dengan satu nilai yang sama pada B</string>
    <string name="kf4">Sebuah atribut bisa bergantung pada lebih dari satu atribut</string>
    <string name="kf5"><![CDATA[Notasi : {A,B,…} -> Z]]></string>
    <string name="kf6">Atribut Z mempunyai dependensi terhadap pasangan A dan B</string>



    <!--    Ketergantungan sepenuhnya-->
    <string name="ksp1">Suatu atribut B dikatakan memiliki dependensi sepenuhnya terhadap A apabila </string>
    <string name="ksp2">1. Atribut B mempunyai dependensi fungsional terhadap atribut A</string>
    <string name="ksp3">2. Atribut B tidak memiliki dependensi terhadap bagian dari atribut A</string>


    <!--Ketergantungan sebagian -->
    <string name="ks1">Suatu atribut B dikatakan memiliki dependensi partial terhadap A apabila</string>
    <string name="ks2">1. Atribut B adalah atribut non-key primer dan atribut A adalah primary key</string>
    <string name="ks3">2. Atribut B memiliki dependensi terhadap sebagian dari atribut A (tidak terhadap keseluruhan atribut A)</string>
    <string name="ks4">a</string>

    <!--    Ketergantungan penuh-->
    <string name="kpe1">Suatu atribut B dikatakan memiliki dependensi penuh terhadap A apabila </string>
    <string name="kpe2">1. Atribut B mempunyai dependensi fungsional terhadap atribut A</string>
    <string name="kpe3">2. Atribut A mempunyai dependansi fungsional terhadap atribut B</string>

    <!--Ketergantungan Transitif    -->
    <string name="kt1">Transitive dependency biasanya terjadi pada tabel hasil relasi, atau kondisi dimana terdapat tiga atribut A,B,C. </string>
    <string name="kt2">Kondisinya adalah A ⇒ B dan B ⇒ C. Maka C dikatakan sebagai transitive dependency terhadap A melalui B.</string>
    <string name="kt3">Kuis</string>
    <string name="kt4">a</string>

    <!--Normalisasi Data    -->
    <string name="nd1">Normalisasi adalah suatu proses yang digunakan untuk menentukan pengelompokan atribut dalam sebuah relasi sehingga diperoleh relasi berstruktur baik</string>
    <string name="nd2">Syarat relasi berstruktur baik</string>
    <string name="nd3">1. Mengandung redundansi yang sedikit mungkin</string>
    <string name="nd4">2. Memungkinkan baris-baris dalam relasi disisipkan, dimodifikasi, dan dihapus tanpa menimbulkan kesalahan atau ketidakkonsistenan</string>
    <string name="nd5">Normalisasi dilakukan melalui setiap bentuk form (1NF sampai dengan 5NF)</string>

    <string name="ns1">jh</string>
    <string name="ns2">a</string>
    <string name="ns3">Kuis</string>
    <string name="ns4">a</string>

    <string name="np1">Suatu relasi disebut memenuhi bentuk normal pertama (1NF) jika dan hanya jika setiap atribut dari relasi tersebut hanya memiliki nilai tunggal dan tidak ada pengulangan grup atribut dalam baris</string>
    <string name="np2">Bentuk 1NF tidak boleh mengandung grup atribut yang berulang</string>
    <string name="np3">Kuis</string>
    <string name="np4">a</string>

    <string name="nk1">Suatu relasi disebut memenuhi bentuk normal kedua (2NF) jika dan hanya jika</string>
    <string name="nk2">1. Memenuhi bentuk normal pertama (1NF)</string>
    <string name="nk3">2. Setiap atribut yang bukan primary key tergantung secara fungsional terhadap semua atribut key dan bukan hanya sebagian atribut key (fully functonally dependent)</string>
    <string name="nk4">Untuk normalisasi ke bentuk 2NF, maka tabel 1NF didekomposisi menjadi beberapa tabel yang masing-masing memenuhi 2NF</string>
    <string name="nk5">Bila terdapat ketergantungan parsial maka: eliminate</string>

    <string name="nt1">Suatu relasi disebut memenuhi bentuk normal ketiga (3NF) jika dan hanya jika</string>
    <string name="nt2">1. Memenuhi bentuk normal kedua (2NF)</string>
    <string name="nt3">2. Setiap atribut yang bukan kunci tidak tergantung secara fungsional terdahap atribut non-key yang lain dalam relasi tersebut (tidak terdapat ketergantungan transitif pada atribut non-key)</string>
    <string name="nt4">a</string>

    <string name="apa_itu_arsitektur_basis_data">Apa Itu Arsitektur Basis Data?</string>


</resources>
